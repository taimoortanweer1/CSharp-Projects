<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinkedIn.NET</name>
    </assembly>
    <members>
        <member name="T:LinkedIn.NET.BitField`1">
            <summary>
            Represents generic class intended to store various settings flags by switching on/off the bits of 32-bit integer
            </summary>
            <typeparam name="TE">The type of object to use</typeparam>
        </member>
        <member name="M:LinkedIn.NET.BitField`1.Clear">
            <summary>
            Switches off all bits
            </summary>
        </member>
        <member name="M:LinkedIn.NET.BitField`1.SelectAll">
            <summary>
            Switches on all bits
            </summary>
        </member>
        <member name="P:LinkedIn.NET.BitField`1.Item(`0)">
            <summary>
            Gets or sets value for specified bit
            </summary>
            <param name="index">Bit index</param>
            <returns>Value indicated whether specified bit is switched on or off</returns>
        </member>
        <member name="P:LinkedIn.NET.BitField`1.HasValues">
            <summary>
            Gets value indicating whether at least one bit is switched on
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Groups.LinkedInBits`1">
            <summary>
            Represents generic class intended to store various settings flags by switching on/off the bits of 32-bit integer. 
            The difference from the class it derives from is that current class has read only setters.
            </summary>
            <typeparam name="TE">The type of object to use</typeparam>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInBits`1.Item(`0)">
            <summary>
            Gets value for specified bit
            </summary>
            <param name="index">Bit index</param>
            <returns>Value indicated whether specified bit is switched on or off</returns>
        </member>
        <member name="T:LinkedIn.NET.Groups.LinkedInGroup">
            <summary>
            Represents LinkedIn group object.
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroup.LoadPosts(LinkedIn.NET.Options.LinkedInGetGroupPostsOptions)">
            <summary>
            Loads group's posts
            </summary>
            <param name="options"><see cref="T:LinkedIn.NET.Options.LinkedInGetGroupPostsOptions"/> object representing posts retrieval options</param>
            <returns>Request result</returns>
            <remarks>This is synchronous operation, i.e. the current thread will be suspended until it finishes to load all posts. If you want to load group's posts asynchronously, consider to use <see cref="M:LinkedIn.NET.LinkedInClient.GetGroupPosts(LinkedIn.NET.Options.LinkedInGetGroupPostsOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroupPost}}})"/> function instead</remarks>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroup.ReplacePosts(System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroupPost})">
            <summary>
            Allows to replace group's posts with new ones, e.g by those received by <see cref="M:LinkedIn.NET.LinkedInClient.GetGroupPosts(LinkedIn.NET.Options.LinkedInGetGroupPostsOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroupPost}}})"/> function
            </summary>
            <param name="posts">Collection of <see cref="T:LinkedIn.NET.Groups.LinkedInGroupPost"/> objects representing new group's posts that will replace old ones</param>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroup.Join">
            <summary>
            Sends request to join current group
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInAlreadyMemberException">Thrown if user is already member of the group</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroup.Leave">
            <summary>
            Sends request to leave current group
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInAlreadyMemberException">Thrown if user is not a member of the group</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroup.SaveSettings">
            <summary>
            Saves group's settings
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInAlreadyMemberException">Thrown if user is not a member of the group</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroup.AddPost(LinkedIn.NET.Options.LinkedInGroupPostOptions)">
            <summary>
            Adds new post to group
            </summary>
            <param name="options">Value containing post's details</param>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when any of post's required parameters is null or empty string</exception>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.Id">
            <summary>
            Gets groups's ID.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.Name">
            <summary>
            Gets groups's name.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.ShortDescription">
            <summary>
            Gets groups's short description.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.Description">
            <summary>
            Gets groups's full description.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.MembershipState">
            <summary>
            Gets group's relationships to user. Can be one of <see cref="T:LinkedIn.NET.LinkedInGroupRelationship"/> enumeration values
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.AvailableAction">
            <summary>
            Gets the group's available actions.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.Posts">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Groups.LinkedInGroupPost"/> objects representing group's posts.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.CountsByCategory">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Groups.LinkedInGroupCategoryCount"/> objects representing group's count-for-category objects.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.IsOpenToNonMembers">
            <summary>
            Gets value indicating whether group is open for non-members.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.Category">
            <summary>
            Gets value indicating group's category. Can be one of <see cref="T:LinkedIn.NET.LinkedInGroupCategory"/> enumeration values.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.WebSiteUrl">
            <summary>
            Gets the external website for the group.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.SiteGroupUrl">
            <summary>
            Gets the LinkedIn site URL for the group.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.Locale">
            <summary>
            Gets the language locale of the group.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.LocationCountry">
            <summary>
            Gets group's country.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.LocationPostalCode">
            <summary>
            Gets group's postal code.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.AllowMembersInvite">
            <summary>
            Gets value indicating whether members are allowed to invite other members to join.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.SmallLogoUrl">
            <summary>
            Gets small logo for the group, to be used when representing the group on other sites.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.LargeLogoUrl">
            <summary>
            Gets large logo for the group, to be used when representing the group on other sites.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.NumberOfMembers">
            <summary>
            Gets number of members of the group.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroup.Settings">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Groups.LinkedInGroupSettings"/> object representing group's settings
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Groups.LinkedInGroupCategoryCount">
            <summary>
            Represents LinkedIn count-for-category object.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupCategoryCount.Category">
            <summary>
            Gets category's code
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupCategoryCount.Count">
            <summary>
            Gets the number of posts created in the past day for category.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Groups.LinkedInGroupComment">
            <summary>
            Represents LinkedIn group's post's comment object.
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupComment.Delete">
            <summary>
            Deletes current comment if user is the comments's creator or marks the post as inappropriate
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when user attempts to delete the comment which is not marked as available for this action</exception>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupComment.Id">
            <summary>
            Gets comment's ID.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupComment.Text">
            <summary>
            Gets comment's text.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupComment.Creator">
            <summary>
            Gets person who created the comment.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupComment.CreationTime">
            <summary>
            Gets timestamp for when the comment was created.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupComment.AvailableAction">
            <summary>
            Gets comment's available actions.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Groups.LinkedInGroupPost">
            <summary>
            Represents LinkedIn group's post object.
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.LoadComments(LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions)">
            <summary>
            Loads post's comments
            </summary>
            <param name="options"><see cref="T:LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions"/> object representing comments retrieval options</param>
            <returns>Request result</returns>
            <remarks>This is synchronous operation, i.e. the current thread will be suspended until it finishes to load all comments. If you want to load post's comments asynchronously, consider to use <see cref="M:LinkedIn.NET.LinkedInClient.GetPostComments(LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroupComment}}})"/> function instead</remarks>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.ReplaceComments(System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroupComment})">
            <summary>
            Allows to replace post's comments with new ones, e.g by those received by <see cref="M:LinkedIn.NET.LinkedInClient.GetPostComments(LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroupComment}}})"/> function
            </summary>
            <param name="comments">Collection of <see cref="T:LinkedIn.NET.Groups.LinkedInGroupComment"/> objects representing new post's comments that will replace old ones</param>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.Like">
            <summary>
            Likes current post
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when user attempts to like the post which is not marked as available for this action</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.Unlike">
            <summary>
            Unlikes current post
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when user attempts to unlike the post which is not marked as available for this action</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.Follow">
            <summary>
            Follows current post
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when user attempts to follow the post which is not marked as available for this action</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.Unfollow">
            <summary>
            Follows current post
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when user attempts to unfollow the post which is not marked as available for this action</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.Categorize(LinkedIn.NET.LinkedInGroupPostFlag)">
            <summary>
            Categorizes current post
            </summary>
            <param name="flag">Value indicating how the current post should be categorized</param>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when user attempts to categorize the post which is not marked as available for this action</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.Comment(System.String)">
            <summary>
            Adds comment to current post
            </summary>
            <param name="comment">Comment's text</param>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when user attempts to add comment to the post which is not marked as available for this action</exception>
        </member>
        <member name="M:LinkedIn.NET.Groups.LinkedInGroupPost.Delete">
            <summary>
            Deletes current post if user is the post's creator or marks the post as inappropriate
            </summary>
            <returns>Request result</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when user attempts to delete the post which is not marked as available for this action</exception>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.Id">
            <summary>
            Gets post's ID.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.PostType">
            <summary>
            Gets post's type. Can be one of <see cref="T:LinkedIn.NET.LinkedInGroupPostType"/> enumeration values.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.Category">
            <summary>
            Gets post's category. Can be one of <see cref="T:LinkedIn.NET.LinkedInGroupPostCategory"/> enumeration values.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.Creator">
            <summary>
            Gets the person who created the post.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.Title">
            <summary>
            Gets post's title.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.Summary">
            <summary>
            GetsGets post's summary.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.CreationTime">
            <summary>
            Gets the timestamp for when the post was created.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.IsFollowingByUser">
            <summary>
            Gets the value indicating whether the poster is following by currently logged in user.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.IsLikedByUser">
            <summary>
            Gets the value indicating whether the post liked by currently logged in user.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.AvailableAction">
            <summary>
            Gets the post's available actions.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.Likes">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInLike"/> objects representing likes for the post.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.Comments">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Groups.LinkedInGroupComment"/> objects representing comments on the post.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.Attachment">
            <summary>
            Get's <see cref="T:LinkedIn.NET.Groups.LinkedInGroupPostAttachment"/> object representing post's attachment.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPost.SiteGroupPostUrl">
            <summary>
            Gets LinkedIn site URL to the post.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Groups.LinkedInGroupPostAttachment">
            <summary>
            Represents LinkedIn group post attachment.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPostAttachment.ContentUrl">
            <summary>
            Gets attachment's content URL.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPostAttachment.Title">
            <summary>
            Gets attachment's title.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPostAttachment.Summary">
            <summary>
            Gets attachment's summary.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPostAttachment.ImageUrl">
            <summary>
            Gets attachment's image URL.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupPostAttachment.ContentDomain">
            <summary>
            Gets attachment's content domain.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Groups.LinkedInGroupSettings">
            <summary>
            Represents LinkedIn group's membership settings
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupSettings.ShowGroupLogoInProfile">
            <summary>
            Gets or sets the value indicating whether or not to show the group logo in the member's profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupSettings.AllowMessagesFromMembers">
            <summary>
            Gets or sets the value indicating whether the member allows email contact from non-members
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupSettings.EmailDigestFrequency">
            <summary>
            Gets or sets the value indicating the frequency at which the member receives group emails. Can be one of <see cref="T:LinkedIn.NET.LinkedInEmailDigestFrequency"/> enumeration values
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupSettings.EmailAnnouncementsFromManagers">
            <summary>
            Gets or sets the value indicating whether the member allows email messages from group managers
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Groups.LinkedInGroupSettings.EmailForEveryNewPost">
            <summary>
            Gets or sets the value indicating whether the member wants to receive an email message for each new post
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Json">
            <summary>
            Provides very simple parsing of JSON string into dictionary
            Based on original code of Patrick van Bergen
            http://techblog.procurios.nl/k/618/news/view/14605/14863/how-do-i-write-my-own-parser-(for-json).html
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Json.DecodeToDictionary(System.String)">
            <summary>
            Parses the JSON string into dictionary
            </summary>
            <param name="json">JSON string</param>
            <returns>Dictionary</returns>
        </member>
        <member name="T:LinkedIn.NET.LinkedInApiStandardProfileRequest">
            <summary>
            Represents LinkedIn API standard profile request object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInApiStandardProfileRequest.Url">
            <summary>
            Gets URL representing the resource you would request for programmatic access to the member's profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInApiStandardProfileRequest.Headers">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInHttpHeader"/> objects representing HTTP headers
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInAuthor">
            <summary>
            Represents LinkedIn author object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInAuthor.Id">
            <summary>
            Gets unique identifier for author
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInAuthor.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing author's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInCertification">
            <summary>
            Represents LinkedIn certification object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCertification.Id">
            <summary>
            Gets unique identifier for certification
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCertification.Name">
            <summary>
            Gets certification's name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCertification.AuthorityName">
            <summary>
            Gets certification's authority name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCertification.Number">
            <summary>
            Gets certification's number
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCertification.StartDate">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInDate"/> object representing certification's start date
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInComment">
            <summary>
            Represents LinkedIn comment object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInComment.Id">
            <summary>
            Gets unique identifier for comment
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInComment.SequenceNumber">
            <summary>
            Gets comment's sequence number
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInComment.Comment">
            <summary>
            Gets comment's text
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInComment.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing the person who has made the comment
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInComment.CommentDate">
            <summary>
            Gets comment's date
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInCompany">
            <summary>
            Represents LinkedIn company object
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInCompanyBase">
            <summary>
            Represents LinkedIn base company object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCompanyBase.Id">
            <summary>
            Gets unique identifier for company
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCompanyBase.Name">
            <summary>
            Gets company's name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCompany.Industry">
            <summary>
            Gets the name of industry in which the company operates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCompany.Size">
            <summary>
            Gets company's number of employees
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCompany.Ticker">
            <summary>
            Gets stock market name for the company, if the company type is public
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCompany.Type">
            <summary>
            Gets a value indicating whether the company is public or private
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInInventor">
            <summary>
            Represents LinkedIn patent inventor
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInInventor.Id">
            <summary>
            Gets unique identifier for inventor
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInInventor.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing inventor person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInMemberGroup">
            <summary>
            Represents LinkedIn member group object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInMemberGroup.Id">
            <summary>
            Gets unique identifier for group
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInMemberGroup.Name">
            <summary>
            Gets group's name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInMemberGroup.SiteGroupRequestUrl">
            <summary>
            Gets group's site request URL
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInActivity">
            <summary>
            Represents LinkedIn person activity object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInActivity.Body">
            <summary>
            Gets activity's body
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInActivity.AppId">
            <summary>
            Gets activity's app id
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInOauth">
            <summary>
            Represents class which holds access token and access token expiration after successful authorization on LinkedIn
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInOauth.AccessToken">
            <summary>
            Gets LinkedIn access token
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInOauth.Expiration">
            <summary>
            Gets LinkedIn access token expiration
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInPatentOffice">
            <summary>
            Represents LinkedIn patent office
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatentOffice.Name">
            <summary>
            Gets patent office name
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInPatentStatus">
            <summary>
            Represents LinkedIn patent status
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatentStatus.Type">
            <summary>
            Gets value indicating whether this is a granted patent or patent application
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatentStatus.Name">
            <summary>
            Gets string indicating whether this is a granted patent or patent application
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInResponse`1">
            <summary>
            Represents object that include information about LinkedIn.NET operations
            </summary>
            <typeparam name="T">Type of object that includes request results</typeparam>
        </member>
        <member name="P:LinkedIn.NET.LinkedInResponse`1.Result">
            <summary>
            Gets object that includes request results
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInResponse`1.Status">
            <summary>
            Gets value indicating operation's success. Can be one of <see cref="T:LinkedIn.NET.LinkedInResponseStatus"/> enumeration values.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInResponse`1.Exception">
            <summary>
            Gets exception occured
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInResponse`1.UserState">
            <summary>
            Gets a user-defined object that qualifies or contains information about response
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInResponse`1.Message">
            <summary>
            Gets possible web response message 
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Members.LinkedInBasicProfile">
            <summary>
            Represents LinkedIn basic profile
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Members.LinkedInPerson">
            <summary>
            Represents LinkedIn person object 
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Members.LinkedInPerson.SendMessage(System.String,System.String,System.Boolean)">
            <summary>
            Sends message to current member
            </summary>
            <param name="subject">Message subject</param>
            <param name="body">Message body</param>
            <param name="includeSenderInRecipients">Indicates whether sender of message should be included in recipients</param>
            <returns>Value containing true or false, depending on operation success, and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when message's subject or body are null or empty strings</exception>
        </member>
        <member name="M:LinkedIn.NET.Members.LinkedInPerson.SendInvitation(System.String,System.String)">
            <summary>
            Sends invitation to current member
            </summary>
            <param name="subject">Invitation subject</param>
            <param name="body">Invitation body</param>
            <returns>Value containing true or false, depending on operation success, and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when some of the following is missing: subject, body, <see cref="P:LinkedIn.NET.Members.LinkedInPerson.ApiStandardProfileRquest"/> property or ApiStandardProfileRquest headers</exception>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInPerson.Id">
            <summary>
            Gets unique identifier for member
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInPerson.FirstName">
            <summary>
            Gets member's first name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInPerson.LastName">
            <summary>
            Gets member's last name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInPerson.Headline">
            <summary>
            Gets member's headline
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInPerson.PictureUrl">
            <summary>
            Gets a URL to the profile picture, if the member has associated one with their profile and it is visible to the requestor
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInPerson.SiteStandardProfileRequest">
            <summary>
            Gets a URL to the member's authenticated profile on LinkedIn
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInPerson.ApiStandardProfileRquest">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInApiStandardProfileRequest"/> object representing API standard profile request object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.MaidenName">
            <summary>
            Gets member's maiden name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.FormattedName">
            <summary>
            Gets member's name formatted based on language
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.PhoneticFirstName">
            <summary>
            Gets member's first name spelled phonetically
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.PhoneticLastName">
            <summary>
            Gets member's last name spelled phonetically
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.FormattedPhoneticName">
            <summary>
            Gets member's name spelled phonetically and formatted based on language
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.Location">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInLocation"/> object representing member's location
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.Industry">
            <summary>
            Gets the industry the member has indicated their profile belongs to
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.Distance">
            <summary>
            Gets the degree distance of the fetched profile from the member who fetched the profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.RelationToViewer">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInRelationToViewer"/> object representing the member's relation-to-viewer
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.CurrentShare">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInShare"/> object representing the member's current share, if set
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.NumConnections">
            <summary>
            Gets the number of connections the member has
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.NumConnectionsCapped">
            <summary>
            Gets a value indicating whether the number of connections has been capped at 500
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.Summary">
            <summary>
            Gets a value where the member describes their professional profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.Specialities">
            <summary>
            Gets a value where the member enumerates their specialties
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.PublicProfileUrl">
            <summary>
            Gets URL to the member's public profile, if enabled
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInBasicProfile.Positions">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInPosition"/> objects representing positions a member has had
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Members.LinkedInEmailProfile">
            <summary>
            Represents LinkedIn email profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInEmailProfile.EmailAddress">
            <summary>
            Gets primary email address of user
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Members.LinkedInFullProfile">
            <summary>
            Represents LinkedIn full profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.LastModifiedTimestamp">
            <summary>
            Gets the timestamp when the member's profile was last edited
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.ProposalComments">
            <summary>
            Gets description how the member approaches proposals
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Associations">
            <summary>
            Gets a string enumerating the Associations a member has
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Interests">
            <summary>
            Gets description of the member's interests
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Publications">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInPublication"/> objects representing publications authored by this member
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Patents">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInPatent"/> objects representing patents or patent applications held by this member
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Languages">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInLanguage"/> objects representing languages and the level of the member's proficiency for each
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Skills">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInSkill"/> objects representing skills held by this member
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Educations">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInEducation"/> objects representing education institutions a member has attended
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Certifications">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInCertification"/> objects representing certifications earned by this member
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Courses">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInCourse"/> objects representing courses a member has taken
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Volunteer">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInVolunteerExperience"/> objects representing volunteering experiences a member has participated in, including organizations and causes
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.ThreeCurrentPositions">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInPosition"/> objects representing positions a member currently holds, limited to three
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.ThreePastPositions">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInPosition"/> objects representing positions a member formerly held, limited to the three most recent
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.RelatedProfileViews">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> objects representing related profiles that were viewed before or after the member's profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Connections">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> objects representing member's connection
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.MemberUrls">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInMemberUrl"/> objects representing URLs the member has chosen to share on their LinkedIn profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.DateOfBirth">
            <summary>
            Gets member's birth date
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.NumRecommenders">
            <summary>
            Gets the number of recommendations the member has
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.RecommendationsReceived">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInRecommendation"/> objects representing recommendations a member has received
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.MfeedRssUrl">
            <summary>
            Gets a URL for the member's multiple feeds
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.JobBookmarks">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInJobBookmark"/> objects representing jobs that the member is following
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Following">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInFollowing"/> objects representing people, companies and industries that the member is following
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInFullProfile.Suggestions">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInSuggestions"/> objects representing people, companies and industries suggested for the member to follow
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInAuthorizationOptions">
            <summary>
            Represents LinkedIn authorization options
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInAuthorizationOptions.Permissions">
            <summary>
            Gets or sets permissions set. Can be a combination of <see cref="T:LinkedIn.NET.LinkedInPermissions"/> enumeration values. If not supplied, defaults to <see cref="F:LinkedIn.NET.LinkedInPermissions.BasicProfile"/>
            </summary>
            <example>
            See <see cref="M:LinkedIn.NET.LinkedInClient.GetAccessToken(System.String,System.String)"/> for example
            </example>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInAuthorizationOptions.RedirectUrl">
            <summary>
            Gets or sets the url where users will be sent after authorization
            </summary>
            <example>
            See <see cref="M:LinkedIn.NET.LinkedInClient.GetAccessToken(System.String,System.String)"/> for example
            </example>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInAuthorizationOptions.State">
            <summary>
            A long unique string value of your choice that is hard to guess. Used to prevent CSRF (cross-site request forgery)
            </summary>
            <example>
            See <see cref="M:LinkedIn.NET.LinkedInClient.GetAccessToken(System.String,System.String)"/> for example
            </example>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetGroupOptions">
            <summary>
            Represents base class for groups retrieving options
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Options.LinkedInGetGroupOptions.#ctor">
            <summary>
            Initializes new instance of LinkedInGetGroupsOptions.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetGroupOptions.GroupOptions">
            <summary>
            Gets or sets the fields to be retrieved for group.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions">
            <summary>
            Represents base class for groups post comments retrieving options
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions.#ctor">
            <summary>
            Initializes new instance of LinkedInGetGroupPostCommentsOptions
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions.CommentOptions">
            <summary>
            Gets or sets the fields to be retrieved for each group's post's comment.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions.PostId">
            <summary>
            Gets or sets the post's id to retrieve comments for
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetGroupPostsOptions">
            <summary>
            Represents base class for groups posts retrieving options
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Options.LinkedInGetGroupPostsOptions.#ctor">
            <summary>
            Initializes new instance of LinkedInGetGroupPostsOptions
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetGroupPostsOptions.PostOptions">
            <summary>
            Gets or sets the fields to be retrieved for each group's post
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetGroupPostsOptions.GroupId">
            <summary>
            Gets or sets group id to retrieve posts for
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetGroupPostsOptions.Role">
            <summary>
            Gets or sets the value indicating optional member's role for posts query. Can be one of <see cref="T:LinkedIn.NET.LinkedInGroupPostRole"/> enumeration values
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetListGroupsOptions">
            <summary>
            Represents object which stores necessary settings for retrieving list of groups details from LinkedIn
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetListGroupsOptions.Count">
            <summary>
            Gets the value indicating the number of groups to return. Values can range between 0 and 25. The default value is null. In this case all possible results will be fetched and number of groups returned on each subsequent request in inner loop will be equal to 25.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetListGroupsOptions.Start">
            <summary>
            Gets the value indicating start location within the result set for paginated request.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetMultipleGroupOptions">
            <summary>
            Represents object which stores necessary settings for retrieving multiple groups details from LinkedIn
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMultipleGroupOptions.Identifiers">
            <summary>
            Gets groups' IDs
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetSingleGroupOptions">
            <summary>
            Represents object which stores necessary settings for retrieving single group details from LinkedIn
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetSingleGroupOptions.Id">
            <summary>
            Gets or sets group's ID
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGroupPostOptions">
            <summary>
            Represents LinkedIn group's post options
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGroupPostOptions.ContentText">
            <summary>
            Gets or sets post contents's text
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGroupPostOptions.ContentTitle">
            <summary>
            Gets or sets post contents's title
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGroupPostOptions.Summary">
            <summary>
            Gets or sets post's summary
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGroupPostOptions.Title">
            <summary>
            Gets or set post's title
            <remarks>Max lenght is 200</remarks>
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGroupPostOptions.SubmittedUrl">
            <summary>
            Gets or set post content's submitted URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGroupPostOptions.SubmittedImageUrl">
            <summary>
            Gets or set posts content's submitted image URL
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInInvitationOptions">
            <summary>
            Represents object which stores necessary settings for sending invitation
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.Subject">
            <summary>
            Gets or sets invitation's subject
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.Body">
            <summary>
            Gets or sets invitation's body
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.InvitationType">
            <summary>
            Gets or sets invitation's type. Can be one of <see cref="T:LinkedIn.NET.LinkedInInvitationType"/> enumeration values
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.RecipientId">
            <summary>
            Gets or sets recipient's ID
            </summary>
            <remarks>Required if <see cref="P:LinkedIn.NET.Options.LinkedInInvitationOptions.InvitationType"/> property is set to InviteById, otherwise can be omitted</remarks>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.AuthorizationName">
            <summary>
            Gets or sets invitation's authorization name
            </summary>
            <remarks>Required if <see cref="P:LinkedIn.NET.Options.LinkedInInvitationOptions.InvitationType"/> property is set to InviteById, otherwise can be omitted. 
            To obtain this value you should take the Value property of Header property of ApiStandardProfileRquest of <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object, split it on the colon ':' and take the value to the left of the colon
            </remarks>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.AuthorizationValue">
            <summary>
            Gets or sets invitation's authorization value
            </summary>
            <remarks>Required if <see cref="P:LinkedIn.NET.Options.LinkedInInvitationOptions.InvitationType"/> property is set to InviteById, otherwise can be omitted. 
            To obtain this value you should take the Value property of Header property of ApiStandardProfileRquest of <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object, split it on the colon ':' and take the value to the right of the colon
            </remarks>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.RecipientEmail">
            <summary>
            Gets or sets recipient's e-mail
            </summary>
            <remarks>Required if <see cref="P:LinkedIn.NET.Options.LinkedInInvitationOptions.InvitationType"/> property is set to InviteByEmail, otherwise can be omitted</remarks>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.RecipientFirstName">
            <summary>
            Gets or sets recipient's first name
            </summary>
            <remarks>Required if <see cref="P:LinkedIn.NET.Options.LinkedInInvitationOptions.InvitationType"/> property is set to InviteByEmail, otherwise can be omitted</remarks>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInInvitationOptions.RecipientLastName">
            <summary>
            Gets or sets recipient's last name
            </summary>
            <remarks>Required if <see cref="P:LinkedIn.NET.Options.LinkedInInvitationOptions.InvitationType"/> property is set to InviteByEmail, otherwise can be omitted</remarks>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInMessageOptions">
            <summary>
            Represents object which stores necessary settings for sending message
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInMessageOptions.Subject">
            <summary>
            Gets or sets message's subject
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInMessageOptions.Body">
            <summary>
            Gets or sets message's body
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInMessageOptions.Recipients">
            <summary>
            Gets list of message's recipients
            </summary>
            <remarks>Each recipient should be represented by member id</remarks>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInMessageOptions.IncludeSenderInRecipients">
            <summary>
            Gets or sets the value indicating whether sender of message should be included in recipients
            </summary>
        </member>
        <member name="M:LinkedIn.NET.RequestRunner.setCompressionFlag(System.Reflection.MethodInfo,System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Clears or returns the CompressPath attribute of UriParser to disable URL compacting
            </summary>
            <param name="getSyntax">MethodInfo</param>
            <param name="flagsField">FieldInfo</param>
            <param name="switchOn">Flag specified wether to clear or return the attribute</param>
            <remarks>Based on post: https://connect.microsoft.com/VisualStudio/feedback/details/386695/system-uri-incorrectly-strips-trailing-dots</remarks>
        </member>
        <member name="T:LinkedIn.NET.Search.LinkedInBucket">
            <summary>
            Represents LinkedIn search bucket object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInBucket.Code">
            <summary>
            The machine processable value for the bucket.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInBucket.Name">
            <summary>
            A human readable name for the bucket.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInBucket.Count">
            <summary>
            The number of results inside the bucket.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInBucket.Selected">
            <summary>
            Gets the value indicating if this bucket's results are included in your search query.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Search.LinkedInFacet">
            <summary>
            Represents LinkedIn search facet object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInFacet.Code">
            <summary>
            The machine processable value for the facet.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInFacet.Name">
            <summary>
            A human readable name for the facet.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInFacet.Buckets">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Search.LinkedInBucket"/> objects representing buckets of current facet
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Search.LinkedInSearchResult">
            <summary>
            Represents object to store results of search at LinkedIn.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInSearchResult.TotalResultsCount">
            <summary>
            Gets value indicating total results count available for current search.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInSearchResult.FetchedResultsCount">
            <summary>
            Gets value indicating fetched results count for current search.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInSearchResult.People">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Members.LinkedInMember"/> objects returned by current search.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Search.LinkedInSearchResult.Facets">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Search.LinkedInFacet"/> objects returned by current search.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInPositionBase">
            <summary>
            Represents LinkedIn position object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPositionBase.Id">
            <summary>
            Gets unique identifier for position
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPositionBase.Title">
            <summary>
            Gets position's title
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPositionBase.Company">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInCompany"/> object representing position's company
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInRecommendation">
            <summary>
            Represents LinkedIn base recommendation object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInRecommendation.Id">
            <summary>
            Gets unique identifier for recommendation
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInRecommendation.TypeCode">
            <summary>
            Gets recommendation's type code
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInRecommendation.Text">
            <summary>
            Gets recommendation's text
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInRecommendation.RecommendationType">
            <summary>
            Gets value indicating recommendation's type - given or received. Can be one of <see cref="T:LinkedIn.NET.LinkedInRecommendationType"/> enumeration values
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInRecommendation.WebUrl">
            <summary>
            Gets recommendation's URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInRecommendation.RecommendationPerson">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing the person who made or received the recommendation, accordingly to RecommendationType value
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInCourse">
            <summary>
            Represents LinkedIn course object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCourse.Id">
            <summary>
            Gets unique identifier for course
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCourse.Name">
            <summary>
            Gets course's name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInCourse.Number">
            <summary>
            Gets course's number
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInDate">
            <summary>
            Represents LinkedIn date object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInDate.Year">
            <summary>
            Gets year part of the date
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInDate.Month">
            <summary>
            Gets month part of the date
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInDate.Day">
            <summary>
            Gets day part of the date
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInEducation">
            <summary>
            Represents LinkedIn education object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInEducation.Id">
            <summary>
            Gets unique identifier for education
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInEducation.SchoolName">
            <summary>
            Gets the name of the school
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInEducation.FieldOfStudy">
            <summary>
            Gets the field of study at the school
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInEducation.StartDate">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInDate"/> object indicating when the education began
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInEducation.EndDate">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInDate"/> object indicating when the education ended
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInEducation.Degree">
            <summary>
            Gets description of the degree, if any, received at this institution
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInEducation.Activities">
            <summary>
            Gets description of the activities the member was involved in while a student at this institution
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInEducation.Notes">
            <summary>
            Gets description of other details on the member's studies
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInFollowing">
            <summary>
            Represents LinkedIn following object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInFollowing.People">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> objects that following object has had
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInFollowing.Companies">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInCompany"/> objects that following object has had
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInFollowing.Industries">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInIndustry"/> objects that following object has had
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInFollowing.SpecialEditions">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInSpecialEdition"/> objects that following object has had
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInHttpHeader">
            <summary>
            Represents LinkedIn HTTP header object, that can be re-used to request an out of network profile programmatically
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInHttpHeader.Name">
            <summary>
            Gets header name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInHttpHeader.Value">
            <summary>
            Gets header value
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInIndustry">
            <summary>
            Represents LinkedIn industry object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInIndustry.Id">
            <summary>
            Gets industry's code
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInIndustry.Group">
            <summary>
            Gets industry's group
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInIndustry.Description">
            <summary>
            Gets industry's description
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInJob">
            <summary>
            Represents LinkedIn job object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.Id">
            <summary>
            Gets unique identifier for job
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.Active">
            <summary>
            Gets value indicationg whether the job is active
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.Company">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInCompanyBase"/> object representing job's company
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.PositionTitle">
            <summary>
            Gets job's position title
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.DescriptionSnippet">
            <summary>
            Gets job's description snippet
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.Description">
            <summary>
            Gets job's description
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.PostingTimestamp">
            <summary>
            Gets job's posting timestamp
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.LocationDescription">
            <summary>
            Gets job's location
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJob.JobSiteRequestUrl">
            <summary>
            Gets job's site request URL
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInJobBookmark">
            <summary>
            Represents LinkedIn job bookmark object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJobBookmark.IsApplied">
            <summary>
            Gets value indicationg whether the job bookmark is applied
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJobBookmark.IsSaved">
            <summary>
            Gets value indicationg whether the job bookmark is saved
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJobBookmark.SavedTimestamp">
            <summary>
            Gets job bookmark's saving timestamp
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInJobBookmark.Job">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInJob"/> object representing bookmark's job
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInLanguage">
            <summary>
            Represents LinkedIn language object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInLanguage.Id">
            <summary>
            Gets unique identifier for language
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInLanguage.Name">
            <summary>
            Gets language name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInLanguage.Proficiency">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInLanguageProficiency"/> object indicating the user's fluency
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInLanguageProficiency">
            <summary>
            Represents LinkedIn language proficiency
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInLanguageProficiency.Level">
            <summary>
            Gets proficiency level
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInLanguageProficiency.Name">
            <summary>
            Gets proficiency name
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInLike">
            <summary>
            Represents LinkedIn like object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInLike.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing the person who has made the like
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInLocation">
            <summary>
            Represents LinkedIn Location
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInLocation.Name">
            <summary>
            Gets location name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInLocation.CountryCode">
            <summary>
            Gets location country code
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInMemberUrl">
            <summary>
            Represents LinkedIn member-url object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInMemberUrl.Url">
            <summary>
            Gets member's URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInMemberUrl.Name">
            <summary>
            Gets member's URL name
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInNewsSource">
            <summary>
            Represents LinkedIn news-source object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInNewsSource.Id">
            <summary>
            Gets unique identifier for news source
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInNewsSource.Name">
            <summary>
            Gets news source's name
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInOrganization">
            <summary>
            Represents LinkedIn organization object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInOrganization.Id">
            <summary>
            Gets unique identifier for organization
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInOrganization.Name">
            <summary>
            Gets organization's name
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInPatent">
            <summary>
            Represents LinkedIn patent object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Id">
            <summary>
            Gets unique identifier for patent
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Title">
            <summary>
            Gets patent title
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Summary">
            <summary>
            Gets a short summary of the patent
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Number">
            <summary>
            Gets a string with the patent or application number
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Status">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInPatentStatus"/> object representing the patent status
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Office">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInPatentOffice"/> object describing the patent issuing body
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Inventors">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInInventor"/> objects representing the patent inventors
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Date">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInDate"/> object indicating when the application was filed or when the patent was granted
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPatent.Url">
            <summary>
            Gets patent URL
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInPosition">
            <summary>
            Represents LinkedIn enhanced position object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPosition.Summary">
            <summary>
            Gets position's summary
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPosition.IsCurrent">
            <summary>
            Gets a value indicating whether the position is marked as current
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPosition.StartDate">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInDate"/> object representing position's start date
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPosition.EndDate">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInDate"/> object representing position's end date
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInPermissions">
            <summary>
            Specifies identifiers to indicate LinkedIn permissions scope while requesting for access token
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.BasicProfile">
            <summary>
            Profile overvew - name, photo, headline, and current positions
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.FullProfile">
            <summary>
            Full profile including experience, education, skills, and recommendations
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.EmailAddress">
            <summary>
            The primary email address user uses for his LinkedIn account
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.Connections">
            <summary>
            1st and 2nd degree connections
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.ContactsInfo">
            <summary>
            Contacts info - address, phone number, and bound accounts
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.Updates">
            <summary>
            Retrieves and posts updates to LinkedIn as user
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.GroupDiscussions">
            <summary>
            Retrieves and posts group discussions as user
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.Messages">
            <summary>
            Sends messages and invitations to connect as user
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPermissions.FullPermissionsScope">
            <summary>
            Full scope of permissions
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInUpdateType">
            <summary>
            Specifies identifiers to indicate which LinkedIn updates should be retrieved
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.None">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.ApplicationUpdate">
            <summary>
            An action that occurred in a partner application either by a connection or by an application itself
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.CompanyFollowUpdate">
            <summary>
            A change to one of the companies the member is following
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.ConnectionUpdate">
            <summary>
            These updates cover aspects of connections made on LinkedIn. They cover both the user connecting and the user's connections making connections (second degree connections)
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.PostedJobUpdate">
            <summary>
            A connection has posted a job posting on LinkedIn
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.JoinedGroupUpdate">
            <summary>
            A connection has joined a group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.ChangedPictureUpdate">
            <summary>
            A connection has updated their profile picture
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.ExtendedProfileUpdate">
            <summary>
            A connection has updated their extended profile, personal information such as phone number, IM account, and Twitter handle
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.RecommendationUpdate">
            <summary>
            A connection was recommended
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.ChangedProfileUpdate">
            <summary>
            A connection has updated their profile. This does not include picture updates, which are covered under PICT type
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.SharedItemUpdate">
            <summary>
            A connection has shared an update or link
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.StatusUpdate">
            <summary>
            A connection has updated their status. This update type is deprecated in favor of SHAR
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.ViralUpdate">
            <summary>
            A connection has commented on or liked another update
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateType.AllAvailableUpdateTypes">
            <summary>
            All available update types
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInUpdateScope">
            <summary>
            Specifies identifiers to indicate which scope is used while retrieving LinkedIn updates
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateScope.AggregatedFeed">
            <summary>
            To return aggregated network feed
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateScope.Self">
            <summary>
            To return member's feed
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateScope.All">
            <summary>
            To return all feed
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInUpdateSortField">
            <summary>
            Specifies identifiers to indicate which <see cref="T:LinkedIn.NET.Updates.LinkedInUpdate"/> field will be used as sort field while retrieving LinkedIn updates
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateSortField.UpdateDate">
            <summary>
            Udpdate date (see <see cref="P:LinkedIn.NET.Updates.LinkedInUpdate.UpdateDate"/>)
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateSortField.UpdateKey">
            <summary>
            Update key (see <see cref="P:LinkedIn.NET.Updates.LinkedInUpdate.UpdateKey"/>)
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateSortField.UpdateType">
            <summary>
            Update type (see <see cref="P:LinkedIn.NET.Updates.LinkedInUpdate.UpdateType"/>)
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInUpdateSortDirection">
            <summary>
            Specifies identifiers to indicate how LinkedIn updates will be sorted after retrieving
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateSortDirection.Ascending">
            <summary>
            Sort ascending
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInUpdateSortDirection.Descending">
            <summary>
            Sort descending
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInShareVisibilityCode">
            <summary>
            Specifies identifiers to indicate what is visibility scope of LinkedIn share
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInShareVisibilityCode.Anyone">
            <summary>
            Any LinkedIn member
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInShareVisibilityCode.ConnectionsOnly">
            <summary>
            Currently logged in user's connections only
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInPatentStatusType">
            <summary>
            Specifies identifiers to indicate LinkedIn patent status
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPatentStatusType.Application">
            <summary>
            Patent has been applicated
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInPatentStatusType.Granted">
            <summary>
            Granted patent
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInRecommendationType">
            <summary>
            Specifies identifiers to indicate LinkedIn recommendation type
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInRecommendationType.Given">
            <summary>
            Given recommendation
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInRecommendationType.Received">
            <summary>
            Received recommendation
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInBasicProfileFields">
            <summary>
            Specifies identifiers to indicate which fields of basic profile should be retrieved
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.Id">
            <summary>
            A unique identifier token for this member
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.FirstName">
            <summary>
            The member's first name
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.LastName">
            <summary>
            The member's last name
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.MaidenName">
            <summary>
            The member's maiden name
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.FormattedName">
            <summary>
            The member's name formatted based on language
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.PhoneticFirstName">
            <summary>
            The member's first name spelled phonetically
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.PhoneticLastName">
            <summary>
            The member's last name spelled phonetically
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.FormattedPhoneticName">
            <summary>
            The member's name spelled phonetically and formatted based on language
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.Headline">
            <summary>
            The member's headline
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.Location">
            <summary>
            The member's location
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.Industry">
            <summary>
            The industry the LinkedIn member has indicated their profile belongs to
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.Distance">
            <summary>
            The degree distance of the fetched profile from the member who fetched the profile
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.RelationToViewer">
            <summary>
            The degree distance of the fetched profile from the member who fetched the profile
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.CurrentShare">
            <summary>
            The member's current share, if set
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.NumConnections">
            <summary>
            The number of connections the member has
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.NumConnectionsCapped">
            <summary>
            The parameter indicating whether value of num-connections has been capped at 500
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.Summary">
            <summary>
            The description of member's professional profile
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.Specialities">
            <summary>
            The description of member's specialties
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.Positions">
            <summary>
            A collection of positions a member has had
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.PictureUrl">
            <summary>
            A URL to the profile picture, if the member has associated one with their profile and it is visible to the requestor
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.SiteStandardProfileRequest">
            <summary>
            The URL to the member's authenticated profile on LinkedIn
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.ApiStandardProfileRequest">
            <summary>
            A URL representing the resource you would request for programmatic access to the member's profile and collection of fields that can be re-used as HTTP headers to request an out of network profile programmatically
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBasicProfileFields.PublicProfileUrl">
            <summary>
            A URL to the member's public profile, if enabled
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInEmailProfileFields">
            <summary>
            Specifies identifiers to indicate which fields of email profile should be retrieved
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInEmailProfileFields.EmailAddress">
            <summary>
            The primary email address of user
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInFullProfileFields">
            <summary>
            Specifies identifiers to indicate which fields of full profile should be retrieved
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.LastModifiedTimestamp">
            <summary>
            The timestamp when the member's profile was last edited
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.ProposalComments">
            <summary>
            The text describing how the member approaches proposals
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Associations">
            <summary>
            The text enumerating the Associations a member has
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Interests">
            <summary>
            The text describing the member's interests
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Publications">
            <summary>
            A collection of publications authored by this member
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Patents">
            <summary>
            A collection of patents or patent applications held by this member
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Languages">
            <summary>
            A collection of languages and the level of the member's proficiency for each
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Skills">
            <summary>
            A collection of skills held by this member
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Certifications">
            <summary>
            A collection of certifications earned by this member
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Educations">
            <summary>
            A collection of education institutions a member has attended
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Courses">
            <summary>
            A collection of courses a member has taken
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Volunteer">
            <summary>
            A collection of volunteering experiences a member has participated in, including organizations and causes
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.ThreeCurrentPositions">
            <summary>
            A collection of positions a member currently holds, limited to three
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.ThreeLastPositions">
            <summary>
            A collection of positions a member formerly held, limited to the three most recent
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.NumRecommenders">
            <summary>
            The number of recommendations the member has
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.RecommendationsReceived">
            <summary>
            A collection of recommendations a member has received
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.MfeedRssUrl">
            <summary>
            A URL for the member's multiple feeds
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Following">
            <summary>
            A collection of people, company, and industries that the member is following
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.JobBookmarks">
            <summary>
            A collection of jobs that the member is following
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.Suggestions">
            <summary>
            A collection of people, company, and industries suggested for the member to follow
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.DateOfBirth">
            <summary>
            Member's birth date
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.MemberUrlResources">
            <summary>
            A collection of URLs the member has chosen to share on their LinkedIn profile
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFullProfileFields.RelatedProfileViews">
            <summary>
            A collection of related profiles that were viewed before or after the member's profile
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGetMemberBy">
            <summary>
            Specifies identifiers to indicate the source for each member in multiple members request
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGetMemberBy.Self">
            <summary>
            Currently logged user
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGetMemberBy.Id">
            <summary>
            Member's Id
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGetMemberBy.Url">
            <summary>
            Member's public URL
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedinSearchResultsOrder">
            <summary>
            Specifies identifiers to indicate how search results should be ordered
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedinSearchResultsOrder.Connections">
            <summary>
            Sort by number of connections per person, from largest to smallest.
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedinSearchResultsOrder.Recommenders">
            <summary>
            Sort by number of recommendations per person, from largest to smallest.
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedinSearchResultsOrder.Distance">
            <summary>
            Sort by degree of separation within the member's network
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedinSearchResultsOrder.Relevance">
            <summary>
            Sort by relevance of results based on the query, from most to least relevant.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInSearchSets">
            <summary>
            Specifies identifiers to indicate what sets of data should be included in search results
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInSearchSets.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInSearchSets.People">
            <summary>
            People set
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInSearchSets.Facets">
            <summary>
            Facets set
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInFacetFields">
            <summary>
            Specifies identifiers to indicate which fields of facet should be included in search results
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetFields.Name">
            <summary>
            A human readable name for the facet
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetFields.Code">
            <summary>
            The machine processable value for the facet
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInBucketFields">
            <summary>
            Specifies identifiers to indicate which fields of buckets should be included in search results
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBucketFields.Name">
            <summary>
            A human readable name for the facet bucket
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBucketFields.Code">
            <summary>
            The machine processable value for the bucket
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBucketFields.Count">
            <summary>
            The number of results inside the bucket
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInBucketFields.Selected">
            <summary>
            Specifies whether this bucket's results are included in your search query
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInFacetTypes">
            <summary>
            Specifies identifiers to indicate which types of facets should be included in query
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetTypes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetTypes.Location">
            <summary>
            A geographical region.
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetTypes.Industry">
            <summary>
            An industry field.
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetTypes.Network">
            <summary>
            A specific relationship to the member's social network.
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetTypes.Language">
            <summary>
            A member locale set to a specific language.
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetTypes.CurrentCompany">
            <summary>
            A member's current companies.
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetTypes.PastCompany">
            <summary>
            A member's past companies.
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetTypes.School">
            <summary>
            A members current or previous school.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInFacetNetwork">
            <summary>
            Specifies identifiers to indicate which types of network facet should be included in query
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetNetwork.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetNetwork.FirstDegree">
            <summary>
            First degree connections
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetNetwork.SecondDegree">
            <summary>
            Second degree connections
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetNetwork.InsideGroup">
            <summary>
            Inside one of user's groups
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetNetwork.OutOfNetwork">
            <summary>
            Out-of-network connections
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInFacetLanguage">
            <summary>
            Specifies identifiers to indicate which types of language facet should be included in query
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetLanguage.English">
            <summary>
            English
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetLanguage.Russian">
            <summary>
            Russian
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetLanguage.Spanish">
            <summary>
            Spanish
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetLanguage.French">
            <summary>
            French
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetLanguage.German">
            <summary>
            German
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetLanguage.Italian">
            <summary>
            Italian
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetLanguage.Portuguese">
            <summary>
            Portuguese
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInFacetLanguage.Others">
            <summary>
            Other languages
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInResponseStatus">
            <summary>
            Specifies identifiers to indicate current response status
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.OK">
            <summary>
            Operation completed successfully
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.BadRequest">
            <summary>
            The request was invalid, which is usually caused by incorrect formating
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.ExpiredToken">
            <summary>
            The access token has expired
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.InvalidAccessToken">
            <summary>
            The access token is invalid
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.SslRequired">
            <summary>
            The request has to use "https:" protocol
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.UpdateFailed">
            <summary>
            The attempt to post share update failed
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.UnauthorizedAction">
            <summary>
            The application tries to perform unauthorized action, e.g. categorize the post of group that member is not a member of
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.TrottleLimitReached">
            <summary>
            The application has reached the throttle limit for a particular resource
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.PageNotFound">
            <summary>
            The endpoint or resource the application is trying to reach doesn't exist
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.InternalServerError">
            <summary>
            There was an application error on the LinkedIn server. Usually the request is valid but needs to be made at a later time
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.UnparsedWebException">
            <summary>
            An unparsed web exception
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInResponseStatus.OtherException">
            <summary>
            Other exception
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupPostType">
            <summary>
            Specifies identifiers to indicate LinkedIn group post type
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostType.NotDefined">
            <summary>
            Post status is not defined
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostType.Standard">
            <summary>
            Standard type
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostType.News">
            <summary>
            News type
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupPostCategory">
            <summary>
            Specifies identifiers to indicate LinkedIn group post category
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostCategory.NotDefined">
            <summary>
            Post category is not defined
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostCategory.Discussion">
            <summary>
            Discussion category
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupCommentAction">
            <summary>
            Specifies identifiers to indicate LinkedIn group post comment available action
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCommentAction.FlagAsInappropriate">
            <summary>
            Flag comment as inappropriate
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCommentAction.Delete">
            <summary>
            Delete comment
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupPostAction">
            <summary>
            Specifies identifiers to indicate LinkedIn group post available action
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostAction.AddComment">
            <summary>
            Add comment to post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostAction.FlagAsInappropriate">
            <summary>
            Flag post as inappropriate
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostAction.CategorizeAsJob">
            <summary>
            Categorize post as job
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostAction.CategorizeAsPromotion">
            <summary>
            Categorize post as promotion
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostAction.Follow">
            <summary>
            Follow post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostAction.Like">
            <summary>
            Like post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostAction.ReplyPrivately">
            <summary>
            Reply privately
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupAction">
            <summary>
            Specifies identifiers to indicate LinkedIn group available action
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupAction.AddPost">
            <summary>
            Add post to group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupAction.Leave">
            <summary>
            Leave group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupAction.ViewPosts">
            <summary>
            View group's posts
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupCategory">
            <summary>
            Specifies identifiers to indicate LinkedIn group category
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCategory.NotDefined">
            <summary>
            Category is not defined
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCategory.Alumni">
            <summary>
            Alumni group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCategory.Corporate">
            <summary>
            Corporate group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCategory.Conference">
            <summary>
            Conference group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCategory.Network">
            <summary>
            Network group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCategory.Philantropic">
            <summary>
            Philantropic  group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCategory.Professional">
            <summary>
            Professional group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupCategory.Other">
            <summary>
            Other group
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupRelationship">
            <summary>
            Specifies identifiers to indicate LinkedIn group relationship to the user
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupRelationship.NonMember">
            <summary>
            User is blocked
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupRelationship.Blocked">
            <summary>
            Awaiting confirmation
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupRelationship.AwaitingConfirmation">
            <summary>
            User is not a member of group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupRelationship.AwaitingParentGroupConfirmation">
            <summary>
            Awaiting parent group confirmation
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupRelationship.Member">
            <summary>
            User is a member of group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupRelationship.Moderator">
            <summary>
            User is a moderator of group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupRelationship.Manager">
            <summary>
            User is a manager of group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupRelationship.Owner">
            <summary>
            User is an owner of group
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupFields">
            <summary>
            Specifies identifiers to indicate which fields of group should be retrieved
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.Id">
            <summary>
            The group's ID
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.Name">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.ShortDescription">
            <summary>
            A short description for the group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.Description">
            <summary>
            A full description for the group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.RelationToViewer">
            <summary>
            The group's relationship to the user and available actions
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.CountsByCategory">
            <summary>
            The number of posts created in the past day for each category
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.IsOpenToNonMembers">
            <summary>
            The value specified whether the group discussions are open to non-members
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.Category">
            <summary>
            The group's category
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.WebSiteUrl">
            <summary>
            The external website for the group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.SiteGroupUrl">
            <summary>
            The LinkedIn site URL for the group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.Locale">
            <summary>
            The language locale of the group
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.Location">
            <summary>
            The group's country and postal code
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.AllowMembersInvite">
            <summary>
            The value specified whether members are allowed to invite other members to join
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.SmallLogoUrl">
            <summary>
            The small logo for the group, to be used when representing the group on other sites
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.LargeLogoUrl">
            <summary>
            The large logo for the group, to be used when representing the group on other sites
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupFields.NumberOfMembers">
            <summary>
            The number of members of the group
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupPostFields">
            <summary>
            Specifies identifiers to indicate which fields of group post should be retrieved
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.Id">
            <summary>
            The post ID
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.PostType">
            <summary>
            The type of post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.Category">
            <summary>
            The category of the post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.Creator">
            <summary>
            The member who created the post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.Title">
            <summary>
            The title of the post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.Summary">
            <summary>
            The post's summary
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.CreationTime">
            <summary>
            The timestamp for when the post was created
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.RelationToViewer">
            <summary>
            Following, likes and available action
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.Likes">
            <summary>
            Likes for the post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.Attachment">
            <summary>
            Comments on the post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFields.SiteGroupPostUrl">
            <summary>
            LinkedIn site URL to the post
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupPostFlag">
            <summary>
            Specifies identifiers to indicate group's posts flags
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFlag.Promotion">
            <summary>
            Promotion flag
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostFlag.Job">
            <summary>
            Job flag
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupPostRole">
            <summary>
            Specifies identifiers to indicate member's role for group's posts query
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostRole.NotDefined">
            <summary>
            Role is not defined
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostRole.Creator">
            <summary>
            Creator of the post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostRole.Commenter">
            <summary>
            Commenter of the post
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostRole.Follower">
            <summary>
            Follower of the post
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInGroupPostCommentFields">
            <summary>
            Specifies identifiers to indicate which fields of group post comment should be retrieved
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostCommentFields.Id">
            <summary>
            The comment ID
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostCommentFields.Text">
            <summary>
            The comment test
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostCommentFields.Creator">
            <summary>
            The member who created the comment
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostCommentFields.CreationTime">
            <summary>
            The timestamp for when the comment was created
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInGroupPostCommentFields.RelationToViewer">
            <summary>
            Available action
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInEmailDigestFrequency">
            <summary>
            Specifies identifiers to indicate the frequency at which the member receives group emails
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInEmailDigestFrequency.None">
            <summary>
            No emails
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInEmailDigestFrequency.Daily">
            <summary>
            Daily emails
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInEmailDigestFrequency.Weekly">
            <summary>
            Weekly emails
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInCompanyUpdateType">
            <summary>
            Specifies identifiers to indicate the type of compane update
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInCompanyUpdateType.ProfileUpdate">
            <summary>
            Profile update
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInCompanyUpdateType.StatusUpdate">
            <summary>
            Status update
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInCompanyUpdateType.JobUpdate">
            <summary>
            Job update
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInCompanyUpdateType.PersonUpdate">
            <summary>
            Person update
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInInvitationType">
            <summary>
            Specifies identifiers to indicate invitation type
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInInvitationType.InviteById">
            <summary>
            Invitation by user ID
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInInvitationType.InviteByEmail">
            <summary>
            Invitation by user e-mail
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInCountries">
            <summary>
            Specifies LinkedIn country
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.None">
            <summary>
            No country
            </summary>
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Andorra">
            
            Andorra
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.UnitedArabEmirates">
            
            United Arab Emirates
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Afghanistan">
            
            Afghanistan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.AntiguaAndBarbuda">
            
            Antigua and Barbuda
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Anguilla">
            
            Anguilla
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Albania">
            
            Albania
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Armenia">
            
            Armenia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Angola">
            
            Angola
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Antarctica">
            
            Antarctica
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Argentina">
            
            Argentina
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.AmericanSamoa">
            
            American Samoa
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Austria">
            
            Austria
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Australia">
            
            Australia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Aruba">
            
            Aruba
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.AlandIslands">
            
            Aland Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Azerbaijan">
            
            Azerbaijan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.BosniaAndHerzegovina">
            
            Bosnia and Herzegovina
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Barbados">
            
            Barbados
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Bangladesh">
            
            Bangladesh
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Belgium">
            
            Belgium
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.BurkinaFaso">
            
            Burkina Faso
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Bulgaria">
            
            Bulgaria
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Bahrain">
            
            Bahrain
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Burundi">
            
            Burundi
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Benin">
            
            Benin
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaintBarthelemy">
            
            Saint Barthélemy
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Bermuda">
            
            Bermuda
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.BruneiDarussalam">
            
            Brunei Darussalam
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.BoliviaPlurinationalStateOf">
            
            Bolivia, Plurinational State of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.BonaireSintEustatiusAndSaba">
            
            Bonaire, Sint Eustatius and Saba
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Brazil">
            
            Brazil
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Bahamas">
            
            Bahamas
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Bhutan">
            
            Bhutan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.BouvetIsland">
            
            Bouvet Island
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Botswana">
            
            Botswana
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Belarus">
            
            Belarus
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Belize">
            
            Belize
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Canada">
            
            Canada
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CocosIslands">
            
            Cocos (Keeling) Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CongoTheDemocraticRepublic">
            
            Congo, the Democratic Republic of the
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CentralAfricanRepublic">
            
            Central African Republic
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Congo">
            
            Congo
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Switzerland">
            
            Switzerland
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CoteDivoire">
            
            Côte d'Ivoire
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CookIslands">
            
            Cook Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Chile">
            
            Chile
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Cameroon">
            
            Cameroon
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.China">
            
            China
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Colombia">
            
            Colombia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CostaRica">
            
            Costa Rica
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Cuba">
            
            Cuba
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CapeVerde">
            
            Cape Verde
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Curacao">
            
            Curaçao
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.ChristmasIsland">
            
            Christmas Island
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Cyprus">
            
            Cyprus
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CzechRepublic">
            
            Czech Republic
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Germany">
            
            Germany
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Djibouti">
            
            Djibouti
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Denmark">
            
            Denmark
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Dominica">
            
            Dominica
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.DominicanRepublic">
            
            Dominican Republic
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Algeria">
            
            Algeria
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Ecuador">
            
            Ecuador
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Estonia">
            
            Estonia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Egypt">
            
            Egypt
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.WesternSahara">
            
            Western Sahara
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Eritrea">
            
            Eritrea
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Spain">
            
            Spain
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Ethiopia">
            
            Ethiopia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Finland">
            
            Finland
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Fiji">
            
            Fiji
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.FalklandIslands">
            
            Falkland Islands (Malvinas)
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.MicronesiaFederatedStatesOf">
            
            Micronesia, Federated States of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.FaroeIslands">
            
            Faroe Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.France">
            
            France
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Gabon">
            
            Gabon
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.UnitedKingdom">
            
            United Kingdom
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Grenada">
            
            Grenada
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Georgia">
            
            Georgia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.FrenchGuiana">
            
            French Guiana
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Guernsey">
            
            Guernsey
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Ghana">
            
            Ghana
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Gibraltar">
            
            Gibraltar
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Greenland">
            
            Greenland
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Gambia">
            
            Gambia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Guinea">
            
            Guinea
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Guadeloupe">
            
            Guadeloupe
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.EquatorialGuinea">
            
            Equatorial Guinea
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Greece">
            
            Greece
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SouthGeorgiaAndTheSouthSandwichIslands">
            
            South Georgia and the South Sandwich Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Guatemala">
            
            Guatemala
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Guam">
            
            Guam
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.GuineaBissau">
            
            Guinea-Bissau
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Guyana">
            
            Guyana
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.HongKong">
            
            Hong Kong
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.HeardIslandAndMcDonaldIslands">
            
            Heard Island and McDonald Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Honduras">
            
            Honduras
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Croatia">
            
            Croatia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Haiti">
            
            Haiti
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Hungary">
            
            Hungary
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Indonesia">
            
            Indonesia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Ireland">
            
            Ireland
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Israel">
            
            Israel
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.IsleOfMan">
            
            Isle of Man
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.India">
            
            India
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.BritishIndianOceanTerritory">
            
            British Indian Ocean Territory
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Iraq">
            
            Iraq
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.IranIslamicRepublicOf">
            
            Iran, Islamic Republic of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Iceland">
            
            Iceland
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Italy">
            
            Italy
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Jersey">
            
            Jersey
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Jamaica">
            
            Jamaica
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Jordan">
            
            Jordan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Japan">
            
            Japan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Kenya">
            
            Kenya
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Kyrgyzstan">
            
            Kyrgyzstan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Cambodia">
            
            Cambodia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Kiribati">
            
            Kiribati
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Comoros">
            
            Comoros
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaintKittsAndNevis">
            
            Saint Kitts and Nevis
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.KoreaDemocraticPeopleRepublicOf">
            
            Korea, Democratic People's Republic of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.KoreaRepublicOf">
            
            Korea, Republic of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Kuwait">
            
            Kuwait
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.CaymanIslands">
            
            Cayman Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Kazakhstan">
            
            Kazakhstan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.LaoPeopleDemocraticRepublic">
            
            Lao People's Democratic Republic
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Lebanon">
            
            Lebanon
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaintLucia">
            
            Saint Lucia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Liechtenstein">
            
            Liechtenstein
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SriLanka">
            
            Sri Lanka
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Liberia">
            
            Liberia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Lesotho">
            
            Lesotho
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Lithuania">
            
            Lithuania
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Luxembourg">
            
            Luxembourg
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Latvia">
            
            Latvia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Libya">
            
            Libya
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Morocco">
            
            Morocco
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Monaco">
            
            Monaco
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.MoldovaRepublicOf">
            
            Moldova, Republic of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Montenegro">
            
            Montenegro
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaintMartinFrenchPart">
            
            Saint Martin (French part)
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Madagascar">
            
            Madagascar
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.MarshallIslands">
            
            Marshall Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.MacedoniaTheFormerYugoslavRepublicOf">
            
            Macedonia, the former Yugoslav Republic of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Mali">
            
            Mali
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Myanmar">
            
            Myanmar
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Mongolia">
            
            Mongolia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Macao">
            
            Macao
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.NorthernMarianaIslands">
            
            Northern Mariana Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Martinique">
            
            Martinique
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Mauritania">
            
            Mauritania
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Montserrat">
            
            Montserrat
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Malta">
            
            Malta
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Mauritius">
            
            Mauritius
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Maldives">
            
            Maldives
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Malawi">
            
            Malawi
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Mexico">
            
            Mexico
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Malaysia">
            
            Malaysia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Mozambique">
            
            Mozambique
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Namibia">
            
            Namibia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.NewCaledonia">
            
            New Caledonia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Niger">
            
            Niger
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.NorfolkIsland">
            
            Norfolk Island
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Nigeria">
            
            Nigeria
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Nicaragua">
            
            Nicaragua
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Netherlands">
            
            Netherlands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Norway">
            
            Norway
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Nepal">
            
            Nepal
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Nauru">
            
            Nauru
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Niue">
            
            Niue
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.NewZealand">
            
            New Zealand
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Oman">
            
            Oman
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Panama">
            
            Panama
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Peru">
            
            Peru
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.FrenchPolynesia">
            
            French Polynesia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.PapuaNewGuinea">
            
            Papua New Guinea
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Philippines">
            
            Philippines
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Pakistan">
            
            Pakistan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Poland">
            
            Poland
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaintPierreAndMiquelon">
            
            Saint Pierre and Miquelon
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Pitcairn">
            
            Pitcairn
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.PuertoRico">
            
            Puerto Rico
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.PalestineStateOf">
            
            Palestine, State of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Portugal">
            
            Portugal
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Palau">
            
            Palau
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Paraguay">
            
            Paraguay
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Qatar">
            
            Qatar
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Reunion">
            
            Réunion
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Romania">
            
            Romania
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Serbia">
            
            Serbia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.RussianFederation">
            
            Russian Federation
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Rwanda">
            
            Rwanda
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaudiArabia">
            
            Saudi Arabia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SolomonIslands">
            
            Solomon Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Seychelles">
            
            Seychelles
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Sudan">
            
            Sudan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Sweden">
            
            Sweden
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Singapore">
            
            Singapore
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaintHelenaAscensionAndTristanDaCunha">
            
            Saint Helena, Ascension and Tristan da Cunha
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Slovenia">
            
            Slovenia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SvalbardAndJanMayen">
            
            Svalbard and Jan Mayen
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Slovakia">
            
            Slovakia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SierraLeone">
            
            Sierra Leone
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SanMarino">
            
            San Marino
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Senegal">
            
            Senegal
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Somalia">
            
            Somalia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Suriname">
            
            Suriname
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SouthSudan">
            
            South Sudan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaoTomeAndPrincipe">
            
            Sao Tome and Principe
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.ElSalvador">
            
            El Salvador
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SintMaartenDutchPart">
            
            Sint Maarten (Dutch part)
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SyrianArabRepublic">
            
            Syrian Arab Republic
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Swaziland">
            
            Swaziland
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.TurksAndCaicosIslands">
            
            Turks and Caicos Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Chad">
            
            Chad
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.FrenchSouthernTerritories">
            
            French Southern Territories
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Togo">
            
            Togo
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Thailand">
            
            Thailand
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Tajikistan">
            
            Tajikistan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Tokelau">
            
            Tokelau
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.TimorLeste">
            
            Timor-Leste
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Turkmenistan">
            
            Turkmenistan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Tunisia">
            
            Tunisia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Tonga">
            
            Tonga
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Turkey">
            
            Turkey
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.TrinidadAndTobago">
            
            Trinidad and Tobago
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Tuvalu">
            
            Tuvalu
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.TaiwanProvinceOfChina">
            
            Taiwan, Province of China
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.TanzaniaUnitedRepublicOf">
            
            Tanzania, United Republic of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Ukraine">
            
            Ukraine
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Uganda">
            
            Uganda
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.UnitedStatesMinorOutlyingIslands">
            
            United States Minor Outlying Islands
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.UnitedStates">
            
            United States
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Uruguay">
            
            Uruguay
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Uzbekistan">
            
            Uzbekistan
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.VaticanCityState">
            
            Holy See (Vatican City State)
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SaintVincentAndTheGrenadines">
            
            Saint Vincent and the Grenadines
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.VenezuelaBolivarianRepublicOf">
            
            Venezuela, Bolivarian Republic of
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.VirginIslandsBritish">
            
            Virgin Islands, British
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.VirginIslandsUS">
            
            Virgin Islands, U.S.
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.VietNam">
            
            Viet Nam
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Vanuatu">
            
            Vanuatu
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.WallisAndFutuna">
            
            Wallis and Futuna
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Samoa">
            
            Samoa
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Yemen">
            
            Yemen
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Mayotte">
            
            Mayotte
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.SouthAfrica">
            
            South Africa
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Zambia">
            
            Zambia
            
        </member>
        <member name="F:LinkedIn.NET.LinkedInCountries.Zimbabwe">
            
            Zimbabwe
            
        </member>
        <member name="T:LinkedIn.NET.LinkedInMissingCredentialException">
            <summary>
            Represents missing credential (API Key or Secret Key) exception
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInAuthenticationFailedException">
            <summary>
            Represents authentication failure exception
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInMissingMemberIdException">
            <summary>
            Represents missing user id exception
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInMissingProfileUrlException">
            <summary>
            Represents missing profile URL exception
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInInvalidProfileUrlException">
            <summary>
            Represents invalid profile URL exception
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInNegativeParameterException">
            <summary>
            Represents negative parameter exception
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInMissingParameterException">
            <summary>
            Represents exception thrown when some parameter is missing
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInCountIsZeroException">
            <summary>
            Represents exception thrown when 'count' parameter of request is equal to 0
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInAuthenticationAbortedException">
            <summary>
            Represents authentication abort exception
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInNoRecipientsException">
            <summary>
            Represents exception thrown when application attempts to send message without recipients
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInAlreadyMemberException">
            <summary>
            Represents exception thrown when user attempts to join the group he is already member of
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInIsNotMemberException">
            <summary>
            Represents exception thrown when user attempts to make operations with group he is not a member of
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInInvalidOperationException">
            <summary>
            Represents exception thrown when user attempts to make not allowed operations with group's post
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetMultipleMembersOptions">
            <summary>
            Represents object which stores necessary settings for retrieving multiple members details from LinkedIn
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetMemberOptions">
            <summary>
            Represents object which stores necessary settings for retrieving member details from LinkedIn
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Options.LinkedInGetMemberOptions.#ctor">
            <summary>
            Initializes new instance of LinkedInGetMemberOptions
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMemberOptions.BasicProfileOptions">
            <summary>
            Gets or sets fields to be retrieved in member's basic profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMemberOptions.EmailProfileOptions">
            <summary>
            Gets or sets fields to be retrieved in member's email profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMemberOptions.FullProfileOptions">
            <summary>
            Gets or sets fields to be retrieved in member's full profile
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMemberOptions.Parameters">
            <summary>
            Gets value of <see cref="T:LinkedIn.NET.Options.LinkedInGetMemberParameters"/> indicating the source of member's request (self, member's ID or member's public URL)
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMemberOptions.HasValues">
            <summary>
            Gets the value indicating whether any field is selected in all profiles
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMultipleMembersOptions.Parameters">
            <summary>
            Hides unused prperty
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMultipleMembersOptions.Params">
            <summary>
            Gets or sets collection of <see cref="T:LinkedIn.NET.Options.LinkedInGetMemberParameters"/> objects representing retrieval parameters
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetMemberParameters">
            <summary>
            Represents parameters for member request
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMemberParameters.GetBy">
            <summary>
            Gets or sets the value indicating how the Param property should be treated. Can be one of <see cref="T:LinkedIn.NET.LinkedInGetMemberBy"/> enumeration values
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetMemberParameters.RequestBy">
            <summary>
            Gets or sets each member source for multiple members request. If <see cref="P:LinkedIn.NET.Options.LinkedInGetMemberParameters.GetBy"/> property is set to <see cref="F:LinkedIn.NET.LinkedInGetMemberBy.Self"/> the value is ignored. If GetBy property is set to <see cref="F:LinkedIn.NET.LinkedInGetMemberBy.Id"/> the value should be member's id. If GetBy property is set to <see cref="F:LinkedIn.NET.LinkedInGetMemberBy.Url"/> the value should be member's public URL.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInGetUpdatesOptions">
            <summary>
            Represents object which stores settings for retrieving updates from LinkedIn
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.#ctor">
            <summary>
            Initializes new instance of LinkedInGetUpdatesOptions
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.UpdateStart">
            <summary>
            Gets update's order number to start from
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.UpdateCount">
            <summary>
            Gets or sets count of updates to retrieve. Max value is 250
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.UpdateType">
            <summary>
            Gets or sets updates types to retrieve. Can be a combination of <see cref="T:LinkedIn.NET.LinkedInUpdateType"/> enumeration values
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.UpdateScope">
            <summary>
            Gets or sets updates scope. Can be one of <see cref="T:LinkedIn.NET.LinkedInUpdateScope"/> enumeration values. Default value is AggregatedFeed
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.After">
            <summary>
            Gets or sets starting date for retrieving updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.Before">
            <summary>
            Gets or sets ending date for retrieving updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.ShowHiddenMembers">
            <summary>
            Gets or sets value indicating whether updates from hidden members should be retrieved
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.SortDirection">
            <summary>
            Gets or sets value indicationg how LinkedIn updates will be sorted after retrieving. Can be one of <see cref="T:LinkedIn.NET.LinkedInUpdateSortDirection"/> enumeration values. Default value is Descending
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.SortBy">
            <summary>
            Gets or sets <see cref="T:LinkedIn.NET.Updates.LinkedInUpdate"/> field which will be used as sort field while retrieving LinkedIn updates. Can be one of <see cref="T:LinkedIn.NET.LinkedInUpdateSortField"/> enumeration values. Default value is UpdateDate
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInGetUpdatesOptions.Parameters">
            <summary>
            Gets value of <see cref="T:LinkedIn.NET.Options.LinkedInGetMemberParameters"/> indicating the source of updates request (self, member's ID or member's public URL)
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInClient">
            <summary>
            Represents object for authentication, posting and getting updates, posting and getting comments, working with groups, sending messages and invitations and executing queries via LinkedIn API
            </summary>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of LinkedInClient
            </summary>
            <param name="apiKey">API key of the application that uses LinkedInClient</param>
            <param name="secretKey">Secret key of the application that uses LinkedInClient</param>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetAuthorizationUrl(LinkedIn.NET.Options.LinkedInAuthorizationOptions)">
            <summary>
            Gets the link to LinkedIn authorization page
            </summary>
            <param name="options">Value of <see cref="T:LinkedIn.NET.Options.LinkedInAuthorizationOptions"/> representing authorization parameters</param>
            <returns>The link to LinkedIn authorization page</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            const string REDIRECT_URL = "http://somesite.net/auth.htm";
            const string STATE = "12345qwertytrewq54321";
            // create new LinkedInClient object
            var _Client = new LinkedInClient("API_KEY", "SECRET_KEY");
            // Create new LinkedInAuthorizationOptions object with permissions for updates and messages
            var options = new LinkedInAuthorizationOptions
                    {
                        RedirectUrl = REDIRECT_URL,
                        Permissions = LinkedInPermissions.Messages | LinkedInPermissions.Updates,
                        State = STATE
                    };
            // Prepare authorization URL
            var authLink = _Client.GetAuthorizationUrl(options);
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetAccessToken(System.String,System.String)">
            <summary>
            Retrieves LinkedIn access token using previously obtained authorization code
            </summary>
            <param name="authorizationCode">The authorization code obtained from LinkedIn</param>
            <param name="redirectUrl">Redirect URL, has to be the same URL as passed in options parameter to <see cref="M:LinkedIn.NET.LinkedInClient.GetAuthorizationUrl(LinkedIn.NET.Options.LinkedInAuthorizationOptions)"/> method used in any other way to retrieve LinkedIn authorization code</param>
            <returns>True if valid access token retrieved</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingCredentialException">Thrown when API key or secret key are not set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInAuthenticationFailedException">Thrown when retrieving access token failed</exception>
            <example>
            The following example assumes you have a Windows Form named DlgAuthorization with WebBrowser control named wbAuth, having Dock property set to Top. 
            Set form's AutoScroll property to True.
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // If you use WinForms this should be a "real" URL, because WinForms WebBrowser control does not support "fictive" URLs.
            // If you want to redirect to "fictive" URL, consider using WPF, because WPF WebBrowser control will redirect to such URL without problem.
            // In this case replace browser Navigated event with Navigating respectively.
            private const string REDIRECT_URL = "http://somesite.net/auth.htm";
            // Some unique long string
            private const string STATE = "12345qwertytrewq54321";
            // LinkedInClient object
            private LinkedInClient _Client;
            
            ...
            
            private void authorizeOnLinkedIn(string accessToken)
            {
                // create new LinkedInClient object
                _Client = new LinkedInClient("API_KEY", "SECRET_KEY");
                if (string.IsNullOrEmpty(accessToken))
                {
                    // Create new LinkedInAuthorizationOptions object with full set of permissions
                    var options = new LinkedInAuthorizationOptions
                    {
                        RedirectUrl = REDIRECT_URL,
                        Permissions = LinkedInPermissions.Connections | LinkedInPermissions.ContactsInfo |
                                      LinkedInPermissions.EmailAddress | LinkedInPermissions.FullProfile |
                                      LinkedInPermissions.GroupDiscussions | LinkedInPermissions.Messages |
                                      LinkedInPermissions.Updates,
                        State = STATE
                    };
                    // Prepare authorization URL
                    var authLink = _Client.GetAuthorizationUrl(options);
                    // Show authorization dialog
                    var dlgAuth = new DlgAuthorization(authLink);
                    if (dlgAuth.ShowDialog(this) == DialogResult.OK)
                    {
                        // Retrieve access token using authorization code we've got from dialog
                        var response = _Client.GetAccessToken(dlgAuth.AuthorizationCode, REDIRECT_URL);
                        if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                        {
                            // Because this is the only point you can obtain the access token, 
                            // it is a good idea to store it here for further use.
                            // Just do not forget to encrypt it before storage (assuming saveEncrypted procedure exists)
                            saveEncrypted(response.Result.AccessToken);
                            // Store expiration as well (assuming saveExpiration procedure exists)
                            saveExpiration(response.Result.Expiration);
                        }
                    }
                    else
                    {
                        MessageBox.Show(dlgAuth.OauthErrorDescription, dlgAuth.OauthError);
                        return;
                    }
                }
                else
                {
                    // Just set access token
                    _Client.AccessToken = accessToken;
                }
            }
            
            // -----------  DlgAuthentication   -----------
            using System;
            using System.Collections.Specialized;
            using System.Linq;
            using System.Windows.Forms;
            
            namespace LNTest
            {
                public partial class DlgAuthorization : Form
                {
                    public DlgAuthorization(string authLink)
                    {
                        InitializeComponent();
                        // Parse authorization link
                        var qs = parseResponse(authLink);
                        // Store state for further use
                        if (qs["state"] != null)
                        {
                            _State = qs["state"];
                        }
                        // Store redirect URL for further use
                        if (qs["redirect_uri"] != null)
                        {
                            _RedirectUri = new Uri(qs["redirect_uri"]);
                        }
                        // Navigate to authorization link
                        wbAuth.Navigate(new Uri(authLink));
                    }
            
                    private readonly string _State;
                    private readonly Uri _RedirectUri;
            
                    // Property for handling authorization code
                    public string AuthorizationCode { get; private set; }
                    // Properties for handling possible errors
                    public string OauthError { get; private set; }
                    public string OauthErrorDescription { get; private set; }
            
                    private void DlgAuthorization_KeyDown(object sender, KeyEventArgs e)
                    {
                        if (e.KeyCode == Keys.Escape) DialogResult = DialogResult.Cancel;
                    }
            
                    private NameValueCollection parseResponse(string response)
                    {
                        var nvc = new NameValueCollection();
                        if (response.StartsWith("?")) response = response.Substring(1);
                        var arr1 = response.Split('&amp;');
                        foreach (var arr2 in arr1.Select(s =&gt; s.Split('=')).Where(arr2 =&gt; arr2.Length == 2))
                        {
                            nvc.Add(arr2[0].Trim(), arr2[1].Trim());
                        }
                        return nvc;
                    }
            
                    private void wbAuth_Navigated(object sender, WebBrowserNavigatedEventArgs e)
                    {
                        // Resize broser control in order to to force the windows to show vertical scrollbar
                        // LinkedIn authorization always fill the whole browser, so this is the only way to show all fields and buttons in window of suitable size without stretching it to screen height
                        wbAuth.Height = ClientSize.Height * 2;
                        // Check whether we are in needed end point
                        if (e.Url.Scheme != _RedirectUri.Scheme || e.Url.Host != _RedirectUri.Host ||
                            e.Url.AbsolutePath != _RedirectUri.AbsolutePath) return;
                        var queryParams = e.Url.Query;
                        if (queryParams.Length &lt;= 1) return;
                        // Parse query
                        var qs = parseResponse(queryParams);
                        // Check state parameter
                        if (qs["state"] == null) DialogResult = DialogResult.Cancel;
                        if (qs["state"] != _State) DialogResult = DialogResult.Cancel;
                        // Check code parameter
                        if (qs["code"] != null)
                        {
                            // Store code parameter and close the window
                            AuthorizationCode = qs["code"];
                            DialogResult = DialogResult.OK;
                        }
                        // Check for possible errors
                        else if (qs["error"] != null)
                        {
                            OauthError = qs["error"];
                            if (qs["error_description"] != null)
                            {
                                OauthErrorDescription = qs["error_description"];
                            }
                            DialogResult = DialogResult.Cancel;
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetMembers(LinkedIn.NET.Options.LinkedInGetMultipleMembersOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Members.LinkedInMember}}})">
            <summary>
            Gets multiple LinkedIn member details asynchronously
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetMultipleMembersOptions"/> representing retrieval options</param>
            <param name="action">Action to be invoked when retrieval process ends</param>
            <returns>Status of asynchronus operation</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // define collection for holding members
            private readonly List (LinkedInMember) _Members = new List&lt;LinkedInMember&gt;();
            
            ...
            
            // define retrieval options
            var options = new LinkedInGetMultipleMembersOptions();
            options.BasicProfileOptions.SelectAll();
            options.EmailProfileOptions.SelectAll();
            options.FullProfileOptions.SelectAll();
            // add retrieval parameters
            var parameters = new List&lt;LinkedInGetMemberParameters&gt;()
            // add currently logged in user
            parameters.Add(new LinkedInGetMemberParameters
            {
                GetBy = LinkedInGetMemberBy.Self
            });
            // add additional user id
            parameters.Add(new LinkedInGetMemberParameters
            {
                GetBy = LinkedInGetMemberBy.Id,
                RequestBy = "12345"
            });
            // assign parameters and call the method where processMultipleProfiles is application defined callback function
            options.Params = parameters;
            _client.GetMembers(options, processMultipleProfiles);
            
            ...
            
            // application defined function
            private void processMultipleProfiles(LinkedInResponse&lt;IEnumerable&lt;LinkedInMember&gt;&gt; response)
            {
                // always check response.Result and response.Status before processing
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    _Members.Clear();
                    _Members.AddRange(response.Result);
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetMembers(LinkedIn.NET.Options.LinkedInGetMultipleMembersOptions)">
            <summary>
            Gets multiple LinkedIn members details
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetMultipleMembersOptions"/> representing retrieval options</param>
            <returns>Value containing collection of <see cref="T:LinkedIn.NET.Members.LinkedInMember"/> objects and response status</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define collection for holding members
            private readonly List (LinkedInMember) _Members = new List&lt;LinkedInMember&gt;();
            
            ...
            
            // define retrieval options
            var options = new LinkedInGetMultipleMembersOptions();
            options.BasicProfileOptions.SelectAll();
            options.EmailProfileOptions.SelectAll();
            options.FullProfileOptions.SelectAll();
            // add retrieval parameters
            var parameters = new List&lt;LinkedInGetMemberParameters&gt;()
            // add currently logged in user
            parameters.Add(new LinkedInGetMemberParameters
            {
                GetBy = LinkedInGetMemberBy.Self
            });
            // add additional user id
            parameters.Add(new LinkedInGetMemberParameters
            {
                GetBy = LinkedInGetMemberBy.Id,
                RequestBy = "12345"
            });
            // assign parameters and call the method
            options.Params = parameters;
            var response = _client.GetMembers(options);
            // always check response.Result and response.Status before processing
            if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
            {
                _Members.Clear();
                _Members.AddRange(response.Result);
            }
            else
            {
                // show possible error message LinkedIn response
                MessageBox.Show(response.Message);
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetMember(LinkedIn.NET.Options.LinkedInGetMemberOptions,System.Action{LinkedIn.NET.LinkedInResponse{LinkedIn.NET.Members.LinkedInMember}})">
            <summary>
            Gets LinkedIn member details asynchronously
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetMemberOptions"/> representing retrieval options</param>
            <param name="action">Action to be invoked when retrieval process ends</param>
            <returns>Status of asynchronus operation</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingMemberIdException">Thrown when member is requested by id, but no member Id is set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInMissingProfileUrlException">Thrown when member is requested by public URL, but no URL is set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidProfileUrlException">Thrown when member is requested by public URL, but URL is not well formed</exception>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // define retrieval options
            var options = new LinkedInGetMemberOptions();
            options.BasicProfileOptions.SelectAll();
            options.EmailProfileOptions.SelectAll();
            options.FullProfileOptions.SelectAll();
            // get currently logged in user
            options.Parameters.GetBy = LinkedInGetMemberBy.Self;
            // call the method where processProfile is application defined callback function
            _client.GetMember(options, processProfile);
            
            ...
            
            // application defined function
            private void processProfile(LinkedInResponse&lt;LinkedInMember&gt; response)
            {
                // always check response.Result and response.Status before processing
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    Console.WriteLine(@"Member name: {0} {1}", response.Result.BasicProfile.FirstName,
                       response.Result.BasicProfile.LastName);
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetMember(LinkedIn.NET.Options.LinkedInGetMemberOptions)">
            <summary>
            Gets LinkedIn member details
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetMemberOptions"/> representing retrieval options</param>
            <returns>Value containing <see cref="T:LinkedIn.NET.Members.LinkedInMember"/> object and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingMemberIdException">Thrown when member is requested by id, but no member Id is set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInMissingProfileUrlException">Thrown when member is requested by public URL, but no URL is set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidProfileUrlException">Thrown when member is requested by public URL, but URL is not well formed</exception>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define retrieval options
            var options = new LinkedInGetMemberOptions();
            options.BasicProfileOptions.SelectAll();
            options.EmailProfileOptions.SelectAll();
            options.FullProfileOptions.SelectAll();
            // get member by ID
            options.Parameters.GetBy = LinkedInGetMemberBy.Id;
            options.Parameters.RequestBy = "12345";
            // call the method
            var response = _client.GetMember(options);
            // always check response.Result and response.Status before processing
            if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
            {
                Console.WriteLine(@"Member name: {0} {1}", response.Result.BasicProfile.FirstName,
                   response.Result.BasicProfile.LastName);
            }
            else
            {
                // show possible error message LinkedIn response
                MessageBox.Show(response.Message);
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.ShareUpdate(LinkedIn.NET.Options.LinkedInShareOptions,System.Action{LinkedIn.NET.LinkedInResponse{LinkedIn.NET.LinkedInShareResult}})">
            <summary>
            Shares LinkedIn update asynchronously
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInShareOptions"/> representing share options</param>
            <param name="action">Action to be invoked when update is shared</param>
            <returns>Status of asynchronous operation</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when one or more share content's elements (Title, Description, SubmittedUrl, SubmittedImageUrl) are missing</exception>
            /// <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define share options 
            var options = new LinkedInShareOptions();
            options.Title = "My share title";
            options.Description = "My share description";
            options.Comment = "This is my share comment";
            options.SubmittedUrl = "http://share.url.net";
            options.SubmittedImageUrl = "http://share.image.png";
            options.VisibilityCode = LinkedInShareVisibilityCode.Anyone;
            _Client.ShareUpdate(options, updateShared);
            ...
            // application defined function
            private void updateShared(LinkedInResponse&lt;LinkedInShareResult&gt; response)
            {
                // always check response.Result and response.Status before processing
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    MessageBox.Show(@"Update has been posted." + '\n' + @"Update key: " + response.Result.UpdateKey +
                                    '\n' + @"Update URL: " + response.Result.UpdateUrl);
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.ShareUpdate(LinkedIn.NET.Options.LinkedInShareOptions)">
            <summary>
            Shares LinkedIn update
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInShareOptions"/> representing share options</param>
            <returns>Value containing <see cref="T:LinkedIn.NET.LinkedInShareResult"/> object and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when one or more share content's elements (Title, Description, SubmittedUrl, SubmittedImageUrl) are missing</exception>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define share options 
            var options = new LinkedInShareOptions();
            options.Title = "My share title";
            options.Description = "My share description";
            options.Comment = "This is my share comment";
            options.SubmittedUrl = "http://share.url.net";
            options.SubmittedImageUrl = "http://share.image.png";
            options.VisibilityCode = LinkedInShareVisibilityCode.Anyone;
            var response = _Client.ShareUpdate(options);
            // always check response.Result and response.Status before processing
            if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
            {
                MessageBox.Show(@"Update has been posted." + '\n' + @"Update key: " + response.Result.UpdateKey +
                                    '\n' + @"Update URL: " + response.Result.UpdateUrl);
            }
            else
            {
                // show possible error message LinkedIn response
                MessageBox.Show(response.Message);
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetUpdates(LinkedIn.NET.Options.LinkedInGetUpdatesOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Updates.LinkedInUpdate}}})">
            <summary>
            Gets LinkedIn updates asynchronously
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetUpdatesOptions"/> representing retrieval options</param>
            <param name="action">Action to be invoked when the retrieval process ends</param>
            <returns>Status of asynchronous operation</returns>
            <exception cref="T:LinkedIn.NET.LinkedInNegativeParameterException">Thrown when UpdateCount or UpdateStart parameters of options are negative</exception>
            <exception cref="T:LinkedIn.NET.LinkedInMissingMemberIdException">Thrown when updates are requested by member's id, but no member Id is set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInMissingProfileUrlException">Thrown when updates are requested by public member's URL, but no URL is set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidProfileUrlException">Thrown when updates are requested by public member's URL, but URL is not well formed</exception>
            <exception cref="T:LinkedIn.NET.LinkedInCountIsZeroException">Thrown when UpdateCount parameter of options is equal to 0</exception>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // define retrieval options 
            var options = new LinkedInGetUpdatesOptions
                   {
                       UpdateScope = (LinkedInUpdateScope)cboScope.SelectedItem,
                       SortBy = (LinkedInUpdateSortField)cboSortBy.SelectedItem,
                       SortDirection = (LinkedInUpdateSortDirection)cboDirection.SelectedItem
                   };
            options.UpdateType = LinkedInUpdateType.AllAvailableUpdateTypes;
            options.Parameters.GetBy = LinkedInGetMemberBy.Self;
            _Client.GetUpdates(options, processUpdates);
            ...
            // application defined function
            private void processUpdates(LinkedInResponse&lt;IEnumerable&lt;LinkedInUpdate&gt;&gt; response)
            {
                // always check response.Result and response.Status before processing 
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    var linkedInUpdates = response.Result as LinkedInUpdate[] ?? response.Result.ToArray();
                    if (!linkedInUpdates.Any()) return;
                    foreach (var u in linkedInUpdates)
                    {
                        switch (u.UpdateType)
                        {
                            case "SHAR":
                                Console.WriteLine(((LinkedInShareUpdate)u).UpdateDate);
                                break;
                            case "PROF":
                                // do something by casting: (LinkedInPositionUpdate)u
                                break;
                            case "CONN":
                                // do something by casting: (LinkedInConnectionMemberUpdate)u
                                break;
                            case "NCON":
                            case "CCEM":
                                // do something by casting: (LinkedInConnectionUpdate)u
                                break;
                            case "STAT":
                                // do something by casting: (LinkedInStatusUpdate)u
                                break;
                            case "VIRL":
                                // do something by casting: (LinkedInViralUpdate)u
                                break;
                            case "JGRP":
                                // do something by casting: (LinkedInGroupUpdate)u
                                break;
                               case "APPS":
                            case "APPM":
                                // do something by casting: (LinkedInApplicationUpdate)u
                                break;
                            case "PICU":
                                // do something by casting: (LinkedInPictureUpdate)u
                                break;
                            case "PRFX":
                                // do something by casting: (LinkedInExtendedProfileUpdate)u
                                break;
                            case "PREC":
                            case "SVPR":
                                // do something by casting: (LinkedInRecommendationUpdate)u
                                break;
                            case "JOBP":
                                // do something by casting: (LinkedInJobPostingUpdate)u
                                break;
                            case "CMPY":
                                var baseUpdate = (LinkedInCompanyBaseUpdate)u;
                                switch (baseUpdate.CompanyUpdateType)
                                {
                                    case LinkedInCompanyUpdateType.PersonUpdate:
                                        // do something by casting: (LinkedInCompanyPersonUpdate)u  
                                        break;
                                    case LinkedInCompanyUpdateType.JobUpdate:
                                        // do something by casting: (LinkedInCompanyJobUpdate)u
                                        break;
                                    case LinkedInCompanyUpdateType.ProfileUpdate:
                                        // do something by casting: (LinkedInCompanyProfileUpdate)u
                                        break;
                                    case LinkedInCompanyUpdateType.StatusUpdate:
                                        // do something by casting: (LinkedInCompanyStatusUpdate)u
                                        break;
                                }
                                break;
                            case "MSFC":
                                // do something by casting: (LinkedInStartFollowCompanyUpdate)u
                                break;
                        }
                    }
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetUpdates(LinkedIn.NET.Options.LinkedInGetUpdatesOptions)">
            <summary>
            Gets LinkedIn updates
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetUpdatesOptions"/> representing retrieval options</param>
            <returns>Value containing collection of <see cref="T:LinkedIn.NET.Updates.LinkedInUpdate"/> objects and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInNegativeParameterException">Thrown when UpdateCount or UpdateStart parameters of options are negative</exception>
            <exception cref="T:LinkedIn.NET.LinkedInMissingMemberIdException">Thrown when updates are requested by member's id, but no member Id is set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInMissingProfileUrlException">Thrown when updates are requested by public member's URL, but no URL is set</exception>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidProfileUrlException">Thrown when updates are requested by public member's URL, but URL is not well formed</exception>
            <exception cref="T:LinkedIn.NET.LinkedInCountIsZeroException">Thrown when UpdateCount parameter of options is equal to 0</exception>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // define retrieval options 
            var options = new LinkedInGetUpdatesOptions
                   {
                       UpdateScope = (LinkedInUpdateScope)cboScope.SelectedItem,
                       SortBy = (LinkedInUpdateSortField)cboSortBy.SelectedItem,
                       SortDirection = (LinkedInUpdateSortDirection)cboDirection.SelectedItem
                   };
            options.UpdateType = LinkedInUpdateType.AllAvailableUpdateTypes;
            options.Parameters.GetBy = LinkedInGetMemberBy.Self;
            var response = _Client.GetUpdates(options);
            
            // always check response.Result and response.Status before processing 
            if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
            {
                var linkedInUpdates = response.Result as LinkedInUpdate[] ?? response.Result.ToArray();
                if (!linkedInUpdates.Any()) return;
                foreach (var u in linkedInUpdates)
                {
                    switch (u.UpdateType)
                    {
                        case "SHAR":
                            Console.WriteLine(((LinkedInShareUpdate)u).UpdateDate);
                            break;
                        case "PROF":
                            // do something by casting: (LinkedInPositionUpdate)u
                            break;
                        case "CONN":
                            // do something by casting: (LinkedInConnectionMemberUpdate)u
                            break;
                        case "NCON":
                        case "CCEM":
                            // do something by casting: (LinkedInConnectionUpdate)u
                            break;
                        case "STAT":
                            // do something by casting: (LinkedInStatusUpdate)u
                            break;
                        case "VIRL":
                            // do something by casting: (LinkedInViralUpdate)u
                            break;
                        case "JGRP":
                            // do something by casting: (LinkedInGroupUpdate)u
                            break;
                           case "APPS":
                        case "APPM":
                            // do something by casting: (LinkedInApplicationUpdate)u
                            break;
                        case "PICU":
                            // do something by casting: (LinkedInPictureUpdate)u
                            break;
                        case "PRFX":
                            // do something by casting: (LinkedInExtendedProfileUpdate)u
                            break;
                        case "PREC":
                        case "SVPR":
                            // do something by casting: (LinkedInRecommendationUpdate)u
                            break;
                        case "JOBP":
                            // do something by casting: (LinkedInJobPostingUpdate)u
                            break;
                        case "CMPY":
                            var baseUpdate = (LinkedInCompanyBaseUpdate)u;
                            switch (baseUpdate.CompanyUpdateType)
                            {
                                case LinkedInCompanyUpdateType.PersonUpdate:
                                    // do something by casting: (LinkedInCompanyPersonUpdate)u  
                                    break;
                                case LinkedInCompanyUpdateType.JobUpdate:
                                    // do something by casting: (LinkedInCompanyJobUpdate)u
                                    break;
                                case LinkedInCompanyUpdateType.ProfileUpdate:
                                    // do something by casting: (LinkedInCompanyProfileUpdate)u
                                    break;
                                case LinkedInCompanyUpdateType.StatusUpdate:
                                    // do something by casting: (LinkedInCompanyStatusUpdate)u
                                    break;
                            }
                            break;
                        case "MSFC":
                            // do something by casting: (LinkedInStartFollowCompanyUpdate)u
                            break;
                    }
                }
            }
            else
            {
                // show possible error message LinkedIn response
                MessageBox.Show(response.Message);
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetUpdateComments(System.String,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.LinkedInComment}}})">
            <summary>
            Gets LinkedIn update's comments asynchronously
            </summary>
            <param name="updateKey">Update key</param>
            <param name="action">Action to be invoked when the retrieval process ends</param>
            <returns>Status of asynchronous operation</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when update key is null or empty string</exception>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            _Client.GetUpdateComments("12345", updateCommentsReceived);
            ...
            // application defined function
            private void updateCommentsReceived(LinkedInResponse&lt;IEnumerable&lt;LinkedInComment&gt;&gt; response)
            {
                // always check response.Result and response.Status before processing 
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    foreach (var c in response.Result)
                    {
                        Console.WriteLine(c.Comment);
                    }
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetUpdateLikes(System.String,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.LinkedInLike}}})">
            <summary>
            Gets LinkedIn update's likes asynchronously
            </summary>
            <param name="updateKey">Update key</param>
            <param name="action">Action to be invoked when the retrieval process ends</param>
            <returns>Status of asynchronous operation</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when update key is null or empty string</exception>
            /// <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            _Client.GetUpdateLikes("12345", updateLikesReceived);
            ...
            // application defined function
            private void updateLikesReceived(LinkedInResponse&lt;IEnumerable&lt;LinkedInLike&gt;&gt; response)
            {
                // always check response.Result and response.Status before processing 
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    foreach (var c in response.Result)
                    {
                        Console.WriteLine(c.Person.FirstName);
                    }
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.Search(LinkedIn.NET.Options.LinkedInSearchOptions,System.Action{LinkedIn.NET.LinkedInResponse{LinkedIn.NET.Search.LinkedInSearchResult}})">
            <summary>
            Asynchronously searches LinkedIn using specified options
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInSearchOptions"/> representing search options</param>
            <param name="action">Action to be invoked when the search process ends</param>
            <returns>Status of asynchronous operation</returns>
            <exception cref="T:LinkedIn.NET.LinkedInNegativeParameterException">Thrown when Start or Count parameters of options are negative</exception>
            <exception cref="T:LinkedIn.NET.LinkedInCountIsZeroException">Thrown when Count parameter of options is equal to 0</exception>
            <remarks>For better understanding of LinkedIn People Search API, please visit <a href="https://developer.linkedin.com/documents/people-search-api">LinkedIn developers page</a></remarks>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // define search options
            var options = new LinkedInSearchOptions();
            // set various options parameters
            ...
            _Client.Search(options, getSearchResult);
            ...
            // application defined function
            private void getSearchResult(LinkedInResponse&lt;LinkedInSearchResult&gt; response)
            {
                // always check response.Result and response.Status before processing 
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    // do something with response.Result.People and/or response.Result.Facets
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
            }
            </code>
            </example>
            <seealso cref="T:LinkedIn.NET.Options.LinkedInSearchOptions"/>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.Search(LinkedIn.NET.Options.LinkedInSearchOptions)">
            <summary>
            Searches LinkedIn using specified options
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInSearchOptions"/> representing search options</param>
            <returns>Value containing <see cref="T:LinkedIn.NET.Search.LinkedInSearchResult"/> object and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInNegativeParameterException">Thrown when Start or Count parameters of options are negative</exception>
            <exception cref="T:LinkedIn.NET.LinkedInCountIsZeroException">Thrown when Count parameter of options is equal to 0</exception>
            <remarks>For better understanding of LinkedIn People Search API, please visit <a href="https://developer.linkedin.com/documents/people-search-api">LinkedIn developers page</a></remarks>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // define search options
            var options = new LinkedInSearchOptions();
            // set various options parameters
            ...
            var response = _Client.Search(options);
            
            // always check response.Result and response.Status before processing 
            if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
            {
                // do something with response.Result.People and/or response.Result.Facets
            }
            else
            {
                // show possible error message LinkedIn response
                MessageBox.Show(response.Message);
            }
            </code>
            </example>
            <seealso cref="T:LinkedIn.NET.Options.LinkedInSearchOptions"/>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetPostComments(LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroupComment}}})">
            <summary>
            Gets group post's comments asynchronously
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetGroupPostCommentsOptions"/> representing retrieval options</param>
            <param name="action">Action to be invoked when the retrieval process ends</param>
            <returns>Status of asynchronous operation</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // define retrieval options 
            var options = new LinkedInGetGroupPostCommentsOptions();
            options.CommentOptions.SelectAll();
            options.PostId = 12345;
            _Client.GetPostComments(options, commentsReceived);
            ...
            // application defined function
            private void commentsReceived(LinkedInResponse&lt;IEnumerable&lt;LinkedInGroupComment&gt;&gt; response)
            {
                // always check response.Result and response.Status before processing 
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    foreach (var c in response.Result)
                    {
                        Console.WriteLine(c.Text);
                    }
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
             }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetGroupPosts(LinkedIn.NET.Options.LinkedInGetGroupPostsOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroupPost}}})">
            <summary>
            Asynchronously gets group's posts
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetGroupPostsOptions"/> representing retrieval options</param>
            <param name="action">Action to be invoked when the retrieval process ends</param>
            <returns>Status of asynchronous operation</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ... 
            // define retrieval options 
            var options = new LinkedInGetGroupPostsOptions();
            options.PostOptions.SelectAll();
            options.GroupId = 12345;
            _Client.GetGroupPosts(options, postsMemberReceived);
            ...
            // application defined function
            private void postsMemberReceived(LinkedInResponse&lt;IEnumerable&lt;LinkedInGroupPost&gt;&gt; response)
            {
                // always check response.Result and response.Status before processing 
                if (response.Result != null &amp;&amp; response.Status == LinkedInResponseStatus.OK)
                {
                    foreach (var post in response.Result)
                    {
                        Console.WriteLine(post.Summary);
                    }
                }
                else
                {
                    // show possible error message LinkedIn response
                    MessageBox.Show(response.Message);
                }
             }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetMemberGroups(LinkedIn.NET.Options.LinkedInGetGroupOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroup}}})">
            <summary>
            Asynchronously gets groups that currently logged in user belongs to
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetGroupOptions"/> representing retrieval options</param>
            <param name="action">Action to be invoked when the retrieval process ends</param>
            <returns>Status of asynchronous operation</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define retrieval options
            var options = new LinkedInGetGroupOptions();
            options.GroupOptions.SelectAll();
            _Client.GetMemberGroups(options, listMemberGroups)
            ...
            // application defined function
            private void listMemberGroups(LinkedInResponse&lt;IEnumerable&lt;LinkedInGroup&gt;&gt; result)
            {
                // always check response.Result and response.Status before processing
                if (result.Result != null &amp;&amp; result.Status == LinkedInResponseStatus.OK)
                {
                    foreach (var r in result.Result)
                    {
                        Console.WriteLine(r.Name);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetMemberGroups(LinkedIn.NET.Options.LinkedInGetGroupOptions)">
            <summary>
            Gets groups that currently logged in user belongs to
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetGroupOptions"/> representing retrieval options</param>
            <returns>Value containing collection of <see cref="T:LinkedIn.NET.Groups.LinkedInGroup"/> objects and response status</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define retrieval options
            var options = new LinkedInGetGroupOptions();
            options.GroupOptions.SelectAll();
            var result = _Client.GetMemberGroups(options)
            // always check response.Result and response.Status before processing
            if (result.Result != null &amp;&amp; result.Status == LinkedInResponseStatus.OK)
            {
                foreach (var r in result.Result)
                {
                    Console.WriteLine(r.Name);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetSuggestedGroups(LinkedIn.NET.Options.LinkedInGetGroupOptions)">
            <summary>
            Get groups suggested to member
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetGroupOptions"/> representing retrieval options</param>
            <returns>Value containing collection of <see cref="T:LinkedIn.NET.Groups.LinkedInGroup"/> objects and response status</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define retrieval options
            var options = new LinkedInGetGroupOptions();
            options.GroupOptions.SelectAll();
            var result = _Client.GetSuggestedGroups(options)
            // always check response.Result and response.Status before processing
            if (result.Result != null &amp;&amp; result.Status == LinkedInResponseStatus.OK)
            {
                foreach (var r in result.Result)
                {
                    Console.WriteLine(r.Name);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.GetSuggestedGroups(LinkedIn.NET.Options.LinkedInGetGroupOptions,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.Groups.LinkedInGroup}}})">
            <summary>
            Asynchronously gets groups suggested to member
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetGroupOptions"/> representing retrieval options</param>
            <param name="action">Action to be invoked when the retrieval process ends</param>
            <returns>Status of asynchronous operation</returns>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define retrieval options
            var options = new LinkedInGetGroupOptions();
            options.GroupOptions.SelectAll();
            _Client.GetSuggestedGroups(options, listSuggestedGroups)
            ...
            // application defined function
            private void listSuggestedGroups(LinkedInResponse&lt;IEnumerable&lt;LinkedInGroup&gt;&gt; result)
            {
                // always check response.Result and response.Status before processing
                if (result.Result != null &amp;&amp; result.Status == LinkedInResponseStatus.OK)
                {
                    foreach (var r in result.Result)
                    {
                        Console.WriteLine(r.Name);
                    }
                }
            }
            </code>
            </example> 
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.SendMessage(LinkedIn.NET.Options.LinkedInMessageOptions)">
            <summary>
            Sends message over LinkedIn network
            </summary>
            <param name="options">The oject of type <see cref="T:LinkedIn.NET.Options.LinkedInMessageOptions"/> representing message options</param>
            <returns>Value containing <see cref="T:LinkedIn.NET.Search.LinkedInSearchResult"/> object and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when message's subject or body are null or empty strings</exception>
            <exception cref="T:LinkedIn.NET.LinkedInNoRecipientsException">Thrown when there are no recipients</exception>
            <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define message options
            var options = new LinkedInMessageOptions
                   {
                       Subject = "Message subject",
                       Body = "Message body",
                       IncludeSenderInRecipients = true
                   };
            // add recipients
            options.Recipients.Add("John Smith");
            // add more recipients
            options.Recipients.Add("Homer Simpson");
            // send message
            var response = _Client.SendMessage(options);
            // always check response.Result and response.Status before processing
            if (result.Result != null &amp;&amp; result.Status == LinkedInResponseStatus.OK)
            {
                MessageBox.Show(@"Message sent successfully.");
            }
            </code>
            </example>
        </member>
        <member name="M:LinkedIn.NET.LinkedInClient.SendInvitation(LinkedIn.NET.Options.LinkedInInvitationOptions)">
            <summary>
            Sends invitation over LinkedIn network
            </summary>
            <param name="options">The object of type <see cref="T:LinkedIn.NET.Options.LinkedInInvitationOptions"/> representing invitation options</param>
            <returns>Value containing <see cref="T:LinkedIn.NET.Search.LinkedInSearchResult"/> object and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInMissingParameterException">Thrown when options.InvitationType is set to InviteById and either RecipientId or AuthorizationName or AuthorizationValue is missing, 
            or when options.InvitationType is set to InviteByEmail and either RecipientEmail or RecipientFirstName or RecipientLastName is missing
            </exception>
            /// <example>
            This sample shows how to call this method:
            <code>
            using LinkedIn.NET;
            using LinkedIn.NET.Groups;
            using LinkedIn.NET.Members;
            using LinkedIn.NET.Options;
            using LinkedIn.NET.Search;
            using LinkedIn.NET.Updates;
            ...
            // define invitation options
            var options = new LinkedInInvitationOptions
                   {
                       InvitationType = LinkedInInvitationType.InviteByEmail,
                       Subject = "Invitation subject",
                       Body = "Invitation body",
                       RecipientEmail = "recip@recip.com",
                       RecipientFirstName = "Recipient first name",
                       RecipientLastName = "Recipient last name"
                   };
            // send invitation
            var response = _Client.SendInvitation(options);
            // always check response.Result and response.Status before processing
            if (result.Result != null &amp;&amp; result.Status == LinkedInResponseStatus.OK)
            {
                MessageBox.Show(@"Invitation sent successfully.");
            }
            </code>
            </example>
        </member>
        <member name="P:LinkedIn.NET.LinkedInClient.ApiKey">
            <summary>
            Gets or sets API key
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInClient.SecretKey">
            <summary>
            Gets or sets secret key
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInClient.AccessToken">
            <summary>
            Sets access token
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInClient.CurrentUser">
            <summary>
            Gets basic details of currently logged in user
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInClient.SecurityProtocol">
            <summary>
            Gets or sets security protocol used for web requests. Can be one of <see cref="T:System.Net.SecurityProtocolType"/> enumeration values. The default value is SecurityProtocolType.Tls.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInClient.LastRequest">
            <summary>
            Gets the last request string, not including access token
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Members.LinkedInMember">
            <summary>
            Represents LinkedIn member object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInMember.BasicProfile">
            <summary>
            Gets member's basic profile.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInMember.EmailProfile">
            <summary>
            Gets member's email profile.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Members.LinkedInMember.FullProfile">
            <summary>
            Gets members full profile.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInPublication">
            <summary>
            Represents LinkedIn publication object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPublication.Id">
            <summary>
            Gets unique identifier for publication
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPublication.Title">
            <summary>
            Gets publication's title
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPublication.Date">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInDate"/> object representing publication's date
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPublication.Summary">
            <summary>
            Gets publication's summary
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPublication.Url">
            <summary>
            Gets publication's URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPublication.Publisher">
            <summary>
            Gets the name of the publisher of this publication
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInPublication.Authors">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInAuthor"/> objects representing authors of this publication
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInRelationToViewer">
            <summary>
            Represents LinkedIn relation-to-viewer object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInRelationToViewer.Distance">
            <summary>
            Gets the degree distance of the fetched profile from the member who fetched the profile
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInShare">
            <summary>
            Represents LinkedIn share object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShare.Id">
            <summary>
            Gets unique identifier for share
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShare.ShareDate">
            <summary>
            Gets share's timestamp
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShare.VisibilityCode">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInShareVisibilityCode"/> object representing the share's visibility
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShare.Comment">
            <summary>
            Gets share's comment text
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShare.SourceServiceProvider">
            <summary>
            Gets share's source service provider
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShare.SourceApplication">
            <summary>
            Gets share's source application, if any
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShare.Content">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInShareContent"/> object representing the share's content
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShare.Author">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing the share's author
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInShareContent">
            <summary>
            Represents LinkedIn share content object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareContent.SubmittedUrl">
            <summary>
            Gets share content's submitted URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareContent.ResolvedUrl">
            <summary>
            Gets share content's resolved URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareContent.ShorteneddUrl">
            <summary>
            Gets share content's shortened URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareContent.Title">
            <summary>
            Gets share content's title
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareContent.Description">
            <summary>
            Gets share content's description
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareContent.SubmittedImageUrl">
            <summary>
            Gets share content's submitted image URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareContent.ThumbnailUrl">
            <summary>
            Gets share content's thumbnail URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareContent.EyebrowUrl">
            <summary>
            Gets share content's eyebrow URL
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInShareOptions">
            <summary>
            Represents LinkedIn share options
            </summary>
        </member>
        <member name="F:LinkedIn.NET.Options.LinkedInShareOptions.MAX_COMMENT_LENGTH">
            <summary>
            Max length of LinkedIn share comment
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInShareOptions.Description">
            <summary>
            Gets or set share's description
            <remarks>Max lenght is 256</remarks>
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInShareOptions.Title">
            <summary>
            Gets or set share's title
            <remarks>Max lenght is 200</remarks>
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInShareOptions.Comment">
            <summary>
            Gets or set share's comment
            <remarks>Max lenght is 700</remarks>
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInShareOptions.SubmittedUrl">
            <summary>
            Gets or set share's submitted URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInShareOptions.SubmittedImageUrl">
            <summary>
            Gets or set share's submitted image URL
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInShareOptions.VisibilityCode">
            <summary>
            Gets or set <see cref="T:LinkedIn.NET.LinkedInShareVisibilityCode"/> object representing share's cisibility
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInShareResult">
            <summary>
            Represents results of posting share on LinkedIn
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareResult.UpdateKey">
            <summary>
            Gets update's key
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInShareResult.UpdateUrl">
            <summary>
            Gets update's URL
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInSkill">
            <summary>
            Represents LinkedIn skill object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInSkill.Id">
            <summary>
            Gets unique identifier for skill
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInSkill.Name">
            <summary>
            Gets skill's name
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInSpecialEdition">
            <summary>
            Represents LinkedIn special-edition object
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInSuggestions">
            <summary>
            Represents LinkedIn suggestions object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInSuggestions.ToFollow">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInToFollow"/> object including collections of people, companies and industries suggested for the member to follow
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInToFollow">
            <summary>
            Represents LinkedIn to-follow object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInToFollow.People">
            <summary>
            Gets collections of <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/>objects representing people suggested for the member to follow
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInToFollow.Companies">
            <summary>
            Gets collections of <see cref="T:LinkedIn.NET.LinkedInCompany"/>objects representing companies suggested for the member to follow
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInToFollow.Industries">
            <summary>
            Gets collections of <see cref="T:LinkedIn.NET.LinkedInIndustry"/>objects representing industries suggested for the member to follow
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInToFollow.NewsSources">
            <summary>
            Gets collections of <see cref="T:LinkedIn.NET.LinkedInNewsSource"/>objects representing news sources suggested for the member to follow
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Options.LinkedInSearchOptions">
            <summary>
            Represents object which stores necessary settings for people search
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Options.LinkedInSearchOptions.#ctor">
            <summary>
            Initializes new instance of LinkedInSearchOptions
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.Keywords">
            <summary>
            Gets list of strings to search for members who have all the keywords anywhere in their profile.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FirstName">
            <summary>
            Gets or sets the value to search for members with matching first name.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.LastName">
            <summary>
            Gets or sets the value to search for members with matching last name.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.CompanyName">
            <summary>
            Gets or sets the value to search for members who have a matching company name in their profile.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.CurrentCompany">
            <summary>
            A value of true matches members who currently work at the company specified in the CompanyNames list. A value of false matches members who once worked at the company. Omitting the parameter matches members who currently or once worked the company.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.Title">
            <summary>
            Gets or sets the value to search for members who have a matching title in their profile.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.CurrentTitle">
            <summary>
            A value of true matches members whose title is currently the one specified in the Titles list. A value of false matches members who once had that title. Omitting the parameter matches members who currently or once had that title.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.SchoolName">
            <summary>
            Gets or sets the value to search for members who have a matching school name in their profile.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.CurrentSchool">
            <summary>
            A value of true matches members who currently attend the school specified in the SchoolNames list. A value of false matches members who once attended the school. Omitting the parameter matches members who currently or once attended the school.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.Country">
            <summary>
            Gets or sets the value to search for members with a location in specified country.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.PostalCode">
            <summary>
            Gets or sets the value to search for members centered around a postal code.  Must be combined with the country-code parameter. Not supported for all countries.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.Distance">
            <summary>
            Gets value indicating to search for members with a distance from a central point. Measured in miles. 
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.Start">
            <summary>
            Gets the value indicating start location within the result set for paginated request.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.Count">
            <summary>
            Gets the value indicating the number of profiles to return. Values can range between 0 and 25. The default value is null. In this case max 10 (LinkedIn default) results will be returned after each call.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.Sort">
            <summary>
            Controls the search result order. Can be one of <see cref="T:LinkedIn.NET.LinkedinSearchResultsOrder"/> enumeration values.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.MemberFieldOptions">
            <summary>
            The object of type <see cref="T:LinkedIn.NET.Options.LinkedInGetMemberOptions"/> representing retrieval options for member fields
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.SearchSets">
            <summary>
            Gets or sets the value indicating aht sets of data should be returned in search results. Can be a combination of <see cref="T:LinkedIn.NET.LinkedInSearchSets"/> enumeration values.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetFields">
            <summary>
            Gets or sets fields to be retrieved in search result facets.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.BucketFields">
            <summary>
            Gets or sets fields to be retrieved in search result buckets.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetTypes">
            <summary>
            Gets or sets the value indicating what facet types should be included in query. Can be a combination of <see cref="T:LinkedIn.NET.LinkedInFacetTypes"/> enumeration values.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetNetworkValues">
            <summary>
            Gets or sets the value indicating which types of network facet should be included in query. Can be a combination of <see cref="T:LinkedIn.NET.LinkedInFacetNetwork"/> enumeration values.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetLanguageValues">
            <summary>
            Gets list of <see cref="T:LinkedIn.NET.LinkedInFacetLanguage"/> enumeration values indicatinf which languages should be included in query.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetLocationValues">
            <summary>
            Gets list of strings indicating which geografical regions should be included in query.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetIndustryValues">
            <summary>
            Gets list of integers indicating which industries should be included in query.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetCurrentCompanyValues">
            <summary>
            Gets list of integers indicating which companies should be included in query.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetPastCompanyValues">
            <summary>
            Gets list of integers indicating which companies should be included in query.
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Options.LinkedInSearchOptions.FacetSchoolValues">
            <summary>
            Gets list of integers indicating which schools should be included in query.
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPersonExtendedProfile">
            <summary>
            Represents LinkedIn person object used in PRFX updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonExtendedProfile.MainAddress">
            <summary>
            Gets changed member's main address
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonExtendedProfile.DateOfBirth">
            <summary>
            Gets changed member's date of birth
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonExtendedProfile.PhoneNumbers">
            <summary>
            Gets collectionof member's phone numbers
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonExtendedProfile.ImAccounts">
            <summary>
            Gets collection of member's IM accounts
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonExtendedProfile.TwitterAccounts">
            <summary>
            Gets collection of member's Twitter accounts
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPersonPosition">
            <summary>
            Represents LinkedIn person object used in PRFU updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonPosition.Positions">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInPositionBase"/> ojects representing groups joined by member
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPersonRecommendation">
            <summary>
            Represents LinkedIn person object used in PREC/SVPR updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonRecommendation.Recommendations">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInRecommendation"/> objects representing given recommendations
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInApplicationUpdate">
            <summary>
            Represents LinkedIn update object for APPS/APPM updates
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInUpdate">
            <summary>
            Represents base class for LinkedIn update object
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Updates.LinkedInUpdate.Comment(System.String)">
            <summary>
            Adds comment to current update
            </summary>
            <param name="comment">Comment to add</param>
            <returns>Value containing true or false, depending on operation success, and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when current update is not commentable</exception>
        </member>
        <member name="M:LinkedIn.NET.Updates.LinkedInUpdate.Like">
            <summary>
            Likes current update
            </summary>
             <returns>Value containing true or false, depending on operation success, and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when current update is not likable</exception>
        </member>
        <member name="M:LinkedIn.NET.Updates.LinkedInUpdate.Unlike">
            <summary>
            Unlikes current update
            </summary>
            <returns>Value containing true or false, depending on operation success, and response status</returns>
            <exception cref="T:LinkedIn.NET.LinkedInInvalidOperationException">Thrown when current update is not likable</exception>
        </member>
        <member name="M:LinkedIn.NET.Updates.LinkedInUpdate.LoadComments">
            <summary>
            Loads all update's comments (max 250)
            </summary>
            <returns>Request result</returns>
            <remarks>This is synchronous operation, i.e. the current thread will be suspended until it finishes to load all comments. If you want to load update's comments asynchronously, consider to use <see cref="M:LinkedIn.NET.LinkedInClient.GetUpdateComments(System.String,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.LinkedInComment}}})"/> function instead</remarks>
        </member>
        <member name="M:LinkedIn.NET.Updates.LinkedInUpdate.LoadLikes">
            <summary>
            Loads all update's likes (max 250)
            </summary>
            <returns>Request result</returns>
            <remarks>This is synchronous operation, i.e. the current thread will be suspended until it finishes to load all likes. If you want to load update's likes asynchronously, consider to use <see cref="M:LinkedIn.NET.LinkedInClient.GetUpdateLikes(System.String,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.LinkedInLike}}})"/> function instead</remarks>
        </member>
        <member name="M:LinkedIn.NET.Updates.LinkedInUpdate.ReplaceLikes(System.Collections.Generic.IEnumerable{LinkedIn.NET.LinkedInLike})">
            <summary>
            Allows to replace update's likes with new ones, e.g by those received by <see cref="M:LinkedIn.NET.LinkedInClient.GetUpdateLikes(System.String,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.LinkedInLike}}})"/> function
            </summary>
            <param name="likes">Collection of <see cref="T:LinkedIn.NET.LinkedInLike"/> objects representing new update's likes that will replace old ones</param>
        </member>
        <member name="M:LinkedIn.NET.Updates.LinkedInUpdate.ReplaceComments(System.Collections.Generic.IEnumerable{LinkedIn.NET.LinkedInComment})">
            <summary>
            Allows to replace update's comments with new ones, e.g by those received by <see cref="M:LinkedIn.NET.LinkedInClient.GetUpdateComments(System.String,System.Action{LinkedIn.NET.LinkedInResponse{System.Collections.Generic.IEnumerable{LinkedIn.NET.LinkedInComment}}})"/> function
            </summary>
            <param name="comments">Collection of <see cref="T:LinkedIn.NET.LinkedInComment"/> objects representing new update's comments that will replace old ones</param>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.UpdateDate">
            <summary>
            Gets update's date
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.UpdateKey">
            <summary>
            Gets update's key
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.UpdateType">
            <summary>
            Gets update's type
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.IsCommentable">
            <summary>
            Gets value indicating whether update is commentable
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.IsLikable">
            <summary>
            Gets value indicating whether update is likable
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.IsLiked">
            <summary>
            Gets value indicating whether update is liked
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.NumberOfComments">
            <summary>
            Gets number of update's comments
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.NumberOfLikes">
            <summary>
            Gets number of update's likes
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.Likes">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInLike"/> objects representing the update's likes
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInUpdate.Comments">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInComment"/> objects representing the update's comments
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInApplicationUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInPersonApplication"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInCompanyBaseUpdate">
            <summary>
            Represents LinkedIn base update object for CMPY updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyBaseUpdate.Company">
            <summary>
            Gets update's company
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyBaseUpdate.CompanyUpdateType">
            <summary>
            Gets update's type
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInCompanyJobUpdate">
            <summary>
            Represents LinkedIn update object for CMPY updates (job)
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyJobUpdate.Job">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInJob"/> object representing update's job
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyJobUpdate.ActionCode">
            <summary>
            Gets update's action code
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInCompanyPersonUpdate">
            <summary>
            Represents LinkedIn update object for CMPY updates (person)
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyPersonUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing the person who changed their relationship
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyPersonUpdate.ActionCode">
            <summary>
            Gets update's action code
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyPersonUpdate.OldPosition">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInPositionBase"/> object representing person's old position
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyPersonUpdate.NewPosition">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInPositionBase"/> object representing person's new position
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInCompanyProfileUpdate">
            <summary>
            Represents LinkedIn update object for CMPY updates (profile)
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyProfileUpdate.ActionCode">
            <summary>
            Gets update's action code
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyProfileUpdate.ProfileFieldCode">
            <summary>
            Gets value indicating what's changed
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyProfileUpdate.Editor">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing the person editing the profile
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInCompanyStatusUpdate">
            <summary>
            Represents LinkedIn update object for CMPY updates (status)
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInCompanyStatusUpdate.Share">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInShare"/> object representing update's share
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInConnectionUpdate">
            <summary>
            Represents LinkedIn update object for NCON/CCEM updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInConnectionUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInConnectionMemberUpdate">
            <summary>
            Represents LinkedIn update object for CONN updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInConnectionMemberUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInPersonConnection"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInExtendedProfileUpdate">
            <summary>
            Represents LinkedIn update object for PRFX updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInExtendedProfileUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInPersonExtendedProfile"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInGroupUpdate">
            <summary>
            Represents LinkedIn update object for JGRP updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInGroupUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInPersonGroup"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPersonApplication">
            <summary>
            Represents LinkedIn person object used in APPS/APPM updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonApplication.Activities">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInActivity"/> ojects representing application activities
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPersonConnection">
            <summary>
            Represents LinkedIn person object used in CONN connection updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonConnection.Connections">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> ojects representing members that were recently connected to person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInJobPostingUpdate">
            <summary>
            Represents LinkedIn update object for JOBP updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInJobPostingUpdate.JobPoster">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing update's job poster
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInJobPostingUpdate.JobId">
            <summary>
            Gets job's id
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInJobPostingUpdate.PositionTitle">
            <summary>
            Gets job's position title
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInJobPostingUpdate.CompanyName">
            <summary>
            Gets job's company name
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInJobPostingUpdate.SiteJobRequestUrl">
            <summary>
            Gets job's request URL
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInActionUpdate">
            <summary>
            Represents LinkedIn update action
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInActionUpdate.ActionCode">
            <summary>
            Gets action's code
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInActionUpdate.OriginalUpdate">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInShareUpdate"/> object representing action's original update
            </summary>
        </member>
        <member name="T:LinkedIn.NET.LinkedInVolunteerExperience">
            <summary>
            Represents LinkedIn volunteer-experience object
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInVolunteerExperience.Id">
            <summary>
            Gets unique identifier for volunteer-experience
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInVolunteerExperience.Role">
            <summary>
            Gets volunteer-experience's role
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInVolunteerExperience.Organization">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInOrganization"/> object representing volunteer-experience's organization
            </summary>
        </member>
        <member name="P:LinkedIn.NET.LinkedInVolunteerExperience.Cause">
            <summary>
            Gets volunteer-experience's cause
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPersonGroup">
            <summary>
            Represents LinkedIn person object used in JGRP updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonGroup.MemberGroups">
            <summary>
            Gets collection of <see cref="T:LinkedIn.NET.LinkedInMemberGroup"/> ojects representing groups joined by member
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPersonShare">
            <summary>
            Represents LinkedIn person object used in SHAR updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonShare.CurrentShare">
            <summary>
            Gets <see cref="T:LinkedIn.NET.LinkedInShare"/> object representing the member's current share, if set
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPersonStatus">
            <summary>
            Represents LinkedIn person object used in STAT updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPersonStatus.CurrentStatus">
            <summary>
            Gets update's status text
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPictureUpdate">
            <summary>
            Represents LinkedIn update object for PICU updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPictureUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInPositionUpdate">
            <summary>
            Represents LinkedIn update object for PRFU updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPositionUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInPersonPosition"/> object representing update's person
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInPositionUpdate.UpdateFields">
            <summary>
            Gets collection of strings representig update's updated fields
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInRecommendationUpdate">
            <summary>
            Represents LinkedIn update object for PREC/SVPR updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInRecommendationUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInPersonRecommendation"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInShareUpdate">
            <summary>
            Represents LinkedIn update object for SHAR updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInShareUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInPersonShare"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInStartFollowCompanyUpdate">
            <summary>
            Represents LinkedIn update object for MSFC updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInStartFollowCompanyUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing the person who starts the following
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInStartFollowCompanyUpdate.ActionCode">
            <summary>
            Gets update's action code
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInStatusUpdate">
            <summary>
            Represents LinkedIn update object for STAT updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInStatusUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInPersonStatus"/> object representing update's person
            </summary>
        </member>
        <member name="T:LinkedIn.NET.Updates.LinkedInViralUpdate">
            <summary>
            Represents LinkedIn update object for VIRL updates
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInViralUpdate.Person">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Members.LinkedInPerson"/> object representing update's person
            </summary>
        </member>
        <member name="P:LinkedIn.NET.Updates.LinkedInViralUpdate.UpdateAction">
            <summary>
            Gets <see cref="T:LinkedIn.NET.Updates.LinkedInActionUpdate"/> object representing update's action
            </summary>
        </member>
        <member name="M:LinkedIn.NET.Utils.MakeRequest(System.String,System.String,System.String)">
            <summary>
            Builds and process web request
            </summary>
            <param name="url">Request url</param>
            <param name="method">Request method</param>
            <param name="postData">Post data for POST/PUT request - optional</param>
            <returns>The response data</returns>
        </member>
        <member name="M:LinkedIn.NET.Utils.MakeRequest(System.String,System.String,System.Net.HttpStatusCode@,System.String)">
            <summary>
            Builds and process web request
            </summary>
            <param name="url">Request url</param>
            <param name="method">Request method</param>
            <param name="statusCode">On return, represents response status code</param>
            <param name="postData">Post data for POST/PUT request - optional</param>
            <returns>The response data</returns>
        </member>
        <member name="M:LinkedIn.NET.Utils.webResponseGet(System.Net.HttpWebRequest,System.Net.HttpStatusCode@)">
            <summary>
            Processes the web response.
            </summary>
            <param name="webRequest">The request object.</param>
            <param name="statusCode">On return, represents response status code</param>
            <returns>The response data.</returns>
        </member>
    </members>
</doc>
